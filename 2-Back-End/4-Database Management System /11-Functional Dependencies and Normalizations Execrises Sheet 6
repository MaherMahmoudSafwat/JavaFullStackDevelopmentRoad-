1-
To determine if the functional dependency (FD) ACF → DG is implied by the given set of FDs, we can use the Armstrong's Axioms or compute the closure of the attribute set {A, C, F} and check if D and G are in the closure.
Given FDs:

    A → B

    BC → DE

    AEF → G

Question: Does ACF → DG follow from the given FDs?
Step-by-Step Solution:
1. Compute the closure of {A, C, F}, denoted as {A, C, F}⁺.

    Start with {A, C, F}.

2. Apply the given FDs to see what attributes can be added to the closure.

    FD 1: A → B

        A is in the closure (A ∈ {A, C, F}), so add B.

        Closure becomes {A, B, C, F}.

    FD 2: BC → DE

        B and C are in the closure (B ∈ {A, B, C, F} and C ∈ {A, B, C, F}), so add D and E.

        Closure becomes {A, B, C, D, E, F}.

    FD 3: AEF → G

        A, E, and F are in the closure (A ∈ {A, B, C, D, E, F}, E ∈ {A, B, C, D, E, F}, F ∈ {A, B, C, D, E, F}), so add G.

        Closure becomes {A, B, C, D, E, F, G}.

3. Check if D and G are in the closure of {A, C, F}.

    D ∈ {A, B, C, D, E, F, G} (Yes)

    G ∈ {A, B, C, D, E, F, G} (Yes)

Since both D and G are in the closure of {A, C, F}, the FD ACF → DG is implied by the given set of FDs.
Final Answer:

Yes, ACF → DG is implied by the given set of FDs.

2-
Finding an Irreducible Cover for the Given Functional Dependencies

To find an irreducible cover (also called minimal cover) for the given set of functional dependencies (FDs), we'll follow these steps:

    Combine FDs with the same left-hand side

    Remove extraneous attributes from the left-hand sides

    Remove redundant FDs

Given FDs:

    AB → C

    C → A

    BC → D

    ACD → B

    BE → C

    CE → FA

    CF → BD

    D → EF

Step 1: Combine FDs with same LHS

We can combine:

    CE → F and CE → A into CE → FA (already done)

    CF → B and CF → D into CF → BD (already done)

    D → E and D → F into D → EF (already done)

No further combining needed.
Step 2: Remove extraneous attributes from LHS

We'll examine each FD with multiple attributes on the left:

FD1: AB → C

    Check if A is extraneous: Compute B⁺ = B (doesn't include C), so A is not extraneous

    Check if B is extraneous: Compute A⁺ = A (from C → A, but we don't have A → anything yet), doesn't include C, so B is not extraneous

    No reduction possible

FD3: BC → D

    Check B: Compute C⁺ = C, A (from C → A), doesn't include D, so B not extraneous

    Check C: Compute B⁺ = B, doesn't include D, so C not extraneous

    No reduction possible

FD4: ACD → B

    Check A: Compute CD⁺:

        Start with CD

        From C → A, add A → ACD

        From ACD → B, add B → ACDB

        So CD⁺ includes B ⇒ A is extraneous

        Reduced to CD → B

    Now check if we can reduce CD → B further:

        Check C: Compute D⁺ = D, E, F (from D → EF), doesn't include B

        Check D: Compute C⁺ = C, A, doesn't include B

        No further reduction possible

FD5: BE → C

    Check B: Compute E⁺ = E, doesn't include C

    Check E: Compute B⁺ = B, doesn't include C

    No reduction possible

FD6: CE → FA

    Check C: Compute E⁺ = E, doesn't include FA

    Check E: Compute C⁺ = C, A, includes A but not F

    No reduction possible

FD7: CF → BD

    Check C: Compute F⁺ = F, doesn't include BD

    Check F: Compute C⁺ = C, A, doesn't include BD

    No reduction possible

Step 3: Remove redundant FDs

Now we have:

    AB → C

    C → A

    BC → D

    CD → B (reduced from ACD → B)

    BE → C

    CE → FA

    CF → BD

    D → EF

Check for redundant FDs (ones that can be inferred from others):

    Check AB → C:
    Compute AB⁺ without using AB → C:
    AB⁺ = AB
    From no other FDs can we add anything to AB⁺
    Since we don't get C, AB → C is not redundant

    Check C → A:
    Compute C⁺ without C → A:
    C⁺ = C
    Doesn't include A, so C → A is not redundant

    Check BC → D:
    Compute BC⁺ without BC → D:
    BC⁺ = BC
    From AB → C (but we don't have AB here)
    From C → A, add A → BCA
    From CD → B, but we don't have D
    From BE → C, but we don't have E
    Can't get D, so BC → D is not redundant

    Check CD → B:
    Compute CD⁺ without CD → B:
    CD⁺ = CD
    From C → A, add A → CDA
    From D → EF, add EF → CDAEF
    Can't get B, so CD → B is not redundant

    Check BE → C:
    Compute BE⁺ without BE → C:
    BE⁺ = BE
    From no other FDs can we add to BE⁺
    Doesn't include C, so BE → C is not redundant

    Check CE → FA:
    Compute CE⁺ without CE → FA:
    CE⁺ = CE
    From C → A, add A → CEA
    From BE → C (but we don't have B)
    Can't get F, so CE → FA is not redundant

    Check CF → BD:
    Compute CF⁺ without CF → BD:
    CF⁺ = CF
    From C → A, add A → CFA
    From CD → B (but we don't have D)
    Can't get BD, so CF → BD is not redundant

    Check D → EF:
    Compute D⁺ without D → EF:
    D⁺ = D
    Can't get EF, so D → EF is not redundant

Final Irreducible Cover:

    AB → C

    C → A

    BC → D

    CD → B

    BE → C

    CE → FA

    CF → BD

    D → EF

This is an irreducible cover because:

    Every right-hand side has a single attribute (we've decomposed FA and BD)

    No extraneous attributes exist on any left-hand side

    No functional dependency can be removed without changing the closure of the set

3-
Analysis of the Given Functional Dependencies
Given Relation and FDs

Relation R(A,B,C,D,E,F,G,H,I,J) with the following functional dependencies:

    ABD → E

    AB → G

    B → F

    C → J

    CJ → I

    G → H

Part 1: Checking if the set is irreducible

An irreducible set (minimal cover) must satisfy:

    All right-hand sides are single attributes (already satisfied)

    No extraneous attributes in any left-hand side

    No redundant FDs (none can be removed without changing the closure)

Checking for extraneous attributes:

FD1: ABD → E

    Check A: Compute BD⁺ = BDFGH (from B→F, AB→G, G→H)
    Doesn't include E → A not extraneous

    Check B: Compute AD⁺ = AD
    Doesn't include E → B not extraneous

    Check D: Compute AB⁺ = ABFGH (from B→F, AB→G, G→H)
    Doesn't include E → D not extraneous

FD2: AB → G

    Check A: Compute B⁺ = BF (from B→F)
    Doesn't include G → A not extraneous

    Check B: Compute A⁺ = A
    Doesn't include G → B not extraneous

FD5: CJ → I

    Check C: Compute J⁺ = J
    Doesn't include I → C not extraneous

    Check J: Compute C⁺ = CJ (from C→J)
    Doesn't include I → J not extraneous

Checking for redundant FDs:

Compute closure of all FDs without each one to see if it's implied by others:

    ABD → E: Without it, can we get E?

        No other FD produces E → not redundant

    AB → G: Without it, can we get G?

        No other FD produces G → not redundant

    B → F: Without it, can we get F?

        No other FD produces F → not redundant

    C → J: Without it, can we get J?

        No other FD produces J → not redundant

    CJ → I: Without it, can we get I?

        No other FD produces I → not redundant

    G → H: Without it, can we get H?

        No other FD produces H → not redundant

Conclusion: This set is already irreducible.
Part 2: Finding Candidate Keys

To find candidate keys, we need to find minimal sets of attributes whose closure includes all attributes (A,B,C,D,E,F,G,H,I,J).

Let's start with the essential attributes (those not appearing on any right-hand side):

    A, B, C, D appear on left sides but not on all right sides

    E, F, G, H, I, J appear on right sides

    Essential attributes that must be part of any key: A, B, C, D

Now compute closures of combinations:

    ABCD⁺:

        Start with ABCD

        ABD → E → ABCDE

        AB → G → ABCDEG

        B → F → ABCDEGF

        C → J → ABCDEGFJ

        G → H → ABCDEGFJH

        CJ → I → ABCDEGFJHI

        Closure includes all attributes → ABCD is a superkey

Now check if any subset of ABCD is also a superkey:

    ABC⁺:

        ABC

        AB → G → ABCG

        B → F → ABCGF

        C → J → ABCGFJ

        G → H → ABCGFJH

        CJ → I → ABCGFJHI

        Missing E and D → not a superkey

    ABD⁺:

        ABD

        ABD → E → ABDE

        AB → G → ABDEG

        B → F → ABDEGF

        G → H → ABDEGFH

        Missing C, I, J → not a superkey

    ACD⁺:

        ACD

        C → J → ACDJ

        Missing B, E, F, G, H, I → not a superkey

    BCD⁺:

        BCD

        B → F → BCDF

        C → J → BCDFJ

        CJ → I → BCDFJI

        Missing A, E, G, H → not a superkey

No proper subset of ABCD is a superkey, so ABCD is a candidate key.

Are there other candidate keys with different combinations?

Let's try adding other attributes to smaller sets:

    AB⁺ = ABFGH (from B→F, AB→G, G→H) → missing C,D,E,I,J
    Not a superkey

    AC⁺ = ACJ (from C→J) → missing most attributes
    Not a superkey

    AD⁺ = AD → missing most attributes
    Not a superkey

    BC⁺ = BCFJ (from B→F, C→J) → missing many attributes
    Not a superkey

    BD⁺ = BDF (from B→F) → missing many attributes
    Not a superkey

    CD⁺ = CDJ (from C→J) → missing many attributes
    Not a superkey

No other combinations of essential attributes produce a superkey, and adding any other attributes would make it non-minimal.
Final Answer

    The given set of FDs is already irreducible.

    The only candidate key is ABCD.

4-Analysis of the NADDR Relation
Given Relation

NADDR(NAME, STREET, CITY, STATE, ZIP) with the following business rules:

    NAME is unique

    For any given ZIP, there is just one CITY and STATE

    For any given STREET, CITY, and STATE, there is just one ZIP

Functional Dependencies (FDs) Derived from Business Rules

    NAME → STREET CITY STATE ZIP (since NAME is unique, it determines all other attributes)

    ZIP → CITY STATE (from rule 2)

    STREET CITY STATE → ZIP (from rule 3)

Checking for Irreducible Set

An irreducible set (minimal cover) must satisfy:

    All right-hand sides are single attributes

    No extraneous attributes in any left-hand side

    No redundant FDs

Step 1: Decompose FDs with multiple attributes on RHS

    NAME → STREET

    NAME → CITY

    NAME → STATE

    NAME → ZIP

    ZIP → CITY

    ZIP → STATE

    STREET CITY STATE → ZIP

Step 2: Check for extraneous attributes

FD7: STREET CITY STATE → ZIP

    Check STREET: Compute CITY STATE⁺

        From given FDs, CITY STATE alone doesn't determine ZIP

        So STREET is not extraneous

    Check CITY: Compute STREET STATE⁺

        Similarly, STREET STATE doesn't determine ZIP

        So CITY is not extraneous

    Check STATE: Compute STREET CITY⁺

        STREET CITY doesn't determine ZIP

        So STATE is not extraneous

No extraneous attributes can be removed.
Step 3: Check for redundant FDs

Check if any FD can be derived from others:

    NAME → STREET: Not derivable from others

    NAME → CITY: Not derivable from others

    NAME → STATE: Not derivable from others

    NAME → ZIP: Could be derived via NAME → STREET CITY STATE → ZIP, but we don't have NAME → CITY STATE directly except through the individual FDs

        However, since we're keeping NAME → CITY and NAME → STATE, this is not redundant

    ZIP → CITY: Not derivable from others

    ZIP → STATE: Not derivable from others

    STREET CITY STATE → ZIP: Not derivable from others

No redundant FDs can be removed.
Final Irreducible Set of FDs

    NAME → STREET

    NAME → CITY

    NAME → STATE

    NAME → ZIP

    ZIP → CITY

    ZIP → STATE

    STREET CITY STATE → ZIP

Finding Candidate Keys

A candidate key is a minimal set of attributes that can determine all other attributes.

Let's examine possible keys:

    NAME⁺:

        NAME → STREET, CITY, STATE, ZIP (from FDs 1-4)

        This gives us all attributes

        NAME alone is a superkey

        Since it's a single attribute, it's minimal → candidate key

Are there other candidate keys?

We need to find other minimal sets that can determine all attributes.

    STREET CITY STATE⁺:

        STREET CITY STATE → ZIP (FD7)

        ZIP → CITY, STATE (FDs 5,6) - but we already have these

        We cannot derive NAME from these

        Not a superkey

    NAME is the only attribute that can determine all others:

        No other combination can determine NAME (since NAME is unique and doesn't appear on any RHS)

        Therefore, NAME is the only candidate key

Final Answer
Irreducible Set of Functional Dependencies:

    NAME → STREET

    NAME → CITY

    NAME → STATE

    NAME → ZIP

    ZIP → CITY

    ZIP → STATE

    STREET CITY STATE → ZIP

Candidate Key:

The only candidate key is {NAME}.

5-
Let me analyze each determinancy diagram one by one:
a)

order#
     |
order-date

    Determinant: order# → order-date

    Transitive dependencies: None

    Table occurrence:

    ORDER(order#, order-date)

    Normalized tables:

        ORDER(order#, order-date)

    Candidate key: order#

    Foreign keys: None

b)

order#  customer#  address
   |
item#  quantity

    Determinants:

        order# → customer#, address

        order#, item# → quantity

    Transitive dependencies:

        order# → address is transitive through customer# (if customer# → address)

    Table occurrences:

    ORDER(order#, customer#, address)
    ORDER_ITEM(order#, item#, quantity)

    Normalized tables:

        CUSTOMER(customer#, address)

        ORDER(order#, customer#)

        ORDER_ITEM(order#, item#, quantity)

    Candidate keys:

        ORDER: order#

        ORDER_ITEM: (order#, item#)

    Foreign keys:

        ORDER.customer# references CUSTOMER.customer#

        ORDER_ITEM.order# references ORDER.order#

c)

customer#
   |
address

    Determinant: customer# → address

    Transitive dependencies: None

    Table occurrence:

    CUSTOMER(customer#, address)

    Normalized tables:

        CUSTOMER(customer#, address)

    Candidate key: customer#

    Foreign keys: None

d)

part#
   |
part-description  stock-level  unit-cost  reorder-level

    Determinant: part# → part-description, stock-level, unit-cost, reorder-level

    Transitive dependencies: None

    Table occurrence:

    PART(part#, part-description, stock-level, unit-cost, reorder-level)

    Normalized tables:

        PART(part#, part-description, stock-level, unit-cost, reorder-level)

    Candidate key: part#

    Foreign keys: None

e)

D  E  G
   |
F  H
   |
P
   |
Q  R

    Determinants:

        D, E, G → F, H

        F, H → P

        P → Q, R

    Transitive dependencies:

        D,E,G → P through F,H

        D,E,G → Q,R through P

    Table occurrences:

    TABLE1(D, E, G, F, H)
    TABLE2(F, H, P)
    TABLE3(P, Q, R)

    Normalized tables:

        TABLE1(D, E, G, F, H)

        TABLE2(F, H, P)

        TABLE3(P, Q, R)

    Candidate keys:

        TABLE1: (D,E,G)

        TABLE2: (F,H)

        TABLE3: P

    Foreign keys:

        TABLE2.(F,H) references TABLE1.(F,H)

        TABLE3.P references TABLE2.P

g)

A  B  C

    Determinants: None shown (all independent attributes)

    Transitive dependencies: None

    Table occurrence:

    TABLE(A, B, C)

    Normalized tables:

        TABLE(A, B, C)

    Candidate keys: (A,B,C) [all attributes needed as no FDs shown]

    Foreign keys: None

h)

D  E  F
   |
G

    Determinants:

        D, E, F → G

    Transitive dependencies: None

    Table occurrence:

    TABLE(D, E, F, G)

    Normalized tables:

        TABLE(D, E, F, G)

    Candidate keys: (D,E,F)

    Foreign keys: None

For each diagram, I've:

    Identified the direct functional dependencies

    Noted any transitive dependencies

    Shown sample table occurrences

    Derived properly normalized tables (typically in 3NF or BCNF)

    Identified candidate keys (primary identifiers)

    Listed foreign keys where relationships exist between tables

6-
Let's analyze each of the inference rules one by one, proving or disproving them using Armstrong's Axioms (Reflexivity, Augmentation, and Transitivity) or through counterexamples.
a. {W → Y, X → Y} implies {WX → Y}

Proof:

    W → Y (given)

    X → Y (given)

    WX → W (by Reflexivity: WX → W since W ⊆ WX)

    WX → X (by Reflexivity: WX → X since X ⊆ WX)

    WX → Y (from 3 and 1 using Transitivity)

    WX → Y (from 4 and 2 using Transitivity)

This is actually redundant - we could simply use either path to prove WX → Y. The rule is valid.
b. {X → Y} AND Z ⊆ Y implies {X → Z}

Proof:

    X → Y (given)

    Z ⊆ Y (given)

    Y → Z (by Reflexivity, since Z ⊆ Y)

    X → Z (from 1 and 3 using Transitivity)

The rule is valid.
c. {X → Y, X → W, WY → Z} implies {X → Z}

Proof:

    X → Y (given)

    X → W (given)

    WY → Z (given)

    X → WY (from 1 and 2 using Union, which is derived from Armstrong's axioms)

    X → Z (from 4 and 3 using Transitivity)

The rule is valid.
d. {XY → Z, Y → W} implies {XW → Z}

Disproof by counterexample:
Let's find a relation where XY → Z and Y → W hold, but XW → Z does not.

Consider the following relation:

    X = {1, 1}

    Y = {1, 2}

    W = {a, a} (since Y → W)

    Z = {x, y}

For XY → Z:

    When X=1,Y=1: Z=x

    When X=1,Y=2: Z=y
    This holds as for same XY pairs, Z is same.

For Y → W:

    Y=1 → W=a

    Y=2 → W=a
    This holds.

But for XW → Z:

    X=1,W=a appears with both Z=x and Z=y
    This violates XW → Z.

Thus, the rule is invalid.
e. {X → Y, XY → Z} implies {X → Z}

Proof:

    X → Y (given)

    XY → Z (given)

    X → XY (by Augmentation of X → Y with X)

    X → Z (from 3 and 2 using Transitivity)

The rule is valid.
f. {X → Z, Y → Z} implies {X → Y}

Disproof by counterexample:
Consider a relation where:

    X = {1, 1}

    Y = {1, 2}

    Z = {a, a}

For X → Z:

    X=1 always maps to Z=a (holds)

For Y → Z:

    Y=1 → Z=a

    Y=2 → Z=a (holds)

But X → Y:

    X=1 maps to both Y=1 and Y=2 (fails)

Thus, the rule is invalid.
g. {X → Y, Z → W} implies {XZ → YW}

Proof:

    X → Y (given)

    Z → W (given)

    XZ → X (by Reflexivity)

    XZ → Z (by Reflexivity)

    XZ → Y (from 3 and 1 using Transitivity)

    XZ → W (from 4 and 2 using Transitivity)

    XZ → YW (from 5 and 6 using Union)

The rule is valid.
Summary of Results:

a. Valid
b. Valid
c. Valid
d. Invalid (counterexample provided)
e. Valid
f. Invalid (counterexample provided)
g. Valid

10-
Determinancy Diagram and Normalization for Ward-Patient System
Determinancy Diagram

ward-name
   |
ward-type

patient#
   |
patient-name
   |
patient-blood-group

ward-name ← patient#

Functional Dependencies Identified

    ward-name → ward-type (Each ward has only one type)

    patient# → patient-name, patient-blood-group (Each patient has one name and blood group)

    patient# → ward-name (Current assignment of patients to wards)

Normalization Process
Step 1: Unnormalized Form

All attributes in one table:

ADMISSIONS(ward-name, ward-type, patient#, patient-name, patient-blood-group)

Step 2: 1NF (Eliminate Repeating Groups)

Already in 1NF as all attributes are atomic
Step 3: 2NF (Remove Partial Dependencies)

We identify the candidate key as patient# (since it determines all other attributes through transitive dependencies)

Partial dependencies:

    ward-name → ward-type (not fully dependent on the entire key)

    patient# → patient-name, patient-blood-group (fully dependent)

Decomposition:

    WARD(ward-name, ward-type)

    PATIENT(patient#, patient-name, patient-blood-group, ward-name)

Step 4: 3NF (Remove Transitive Dependencies)

In the PATIENT table:

    patient# → ward-name is a transitive dependency if we consider the natural hierarchy

Final 3NF tables:

    WARD(ward-name, ward-type)

        Primary Key: ward-name

        FD: ward-name → ward-type

    PATIENT(patient#, patient-name, patient-blood-group)

        Primary Key: patient#

        FD: patient# → patient-name, patient-blood-group

    ADMISSION(patient#, ward-name)

        Primary Key: patient# (assuming one patient can only be in one ward at a time)

        FD: patient# → ward-name

        Foreign Key: ward-name references WARD(ward-name)

Representation of Ward-Patient Relationship

The relationship between Ward and Patient is represented through the ADMISSION table, which:

    Contains the foreign key ward-name referencing the WARD table

    Contains the foreign key patient# referencing the PATIENT table

    Implements a one-to-many relationship where:

        One ward can have many patients

        One patient is assigned to exactly one ward (at any given time)

Complete Schema

WARD(ward-name, ward-type)
PATIENT(patient#, patient-name, patient-blood-group)
ADMISSION(patient#, ward-name)

This schema:

    Is in 3NF (no partial or transitive dependencies)

    Preserves all functional dependencies

    Maintains data integrity through foreign key constraints

    Clearly represents the ward-patient relationship through the admission table






