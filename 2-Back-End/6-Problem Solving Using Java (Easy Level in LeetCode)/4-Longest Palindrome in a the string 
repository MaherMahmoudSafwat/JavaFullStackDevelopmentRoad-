   public int longestPalindrome(String s) {
            // Edge case: empty string
            if (s.isEmpty()) {
                return 0;
            }
            // Count character frequencies
            Map<Character, Integer> charCounts = new HashMap<>();
            for (char c : s.toCharArray()) {
                charCounts.put(c, charCounts.getOrDefault(c, 0) + 1);
            }

            int length = 0;
            boolean hasOdd = false;

            // Calculate maximum palindrome length
            for (int count : charCounts.values()) {
                if (count % 2 == 0) {
                    length += count; // Even counts can be fully used
                } else {
                    length += count - 1; // Use even part of odd counts
                    hasOdd = true;      // Remember we have at least one odd count
                }
            }

            // If we had any odd counts, we can add one central character
            if (hasOdd) {
                length++;
            }

            return length;
    }



