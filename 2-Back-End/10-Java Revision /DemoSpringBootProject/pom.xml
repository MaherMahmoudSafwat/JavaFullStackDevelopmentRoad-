<?xml version="1.0" encoding="UTF-8"?>
<!--
===========================================
MAVEN POM.XML FILE EXPLAINED IN DETAIL
===========================================

This is a Maven Project Object Model (POM) file - it's like a recipe that tells Maven:
1. What your project is
2. What dependencies (libraries) it needs
3. How to build it
4. What plugins to use

Maven is a build automation tool that manages your project dependencies and builds your Java applications.
-->

<project xmlns="http://maven.apache.org/POM/4.0.0"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">

	<!--
    MODEL VERSION: Always 4.0.0 for Maven 2 and 3
    This tells Maven which version of the POM model to use
    -->
	<modelVersion>4.0.0</modelVersion>

	<!--
    ===========================================
    PARENT SECTION - SPRING BOOT STARTER PARENT
    ===========================================

    This is SUPER IMPORTANT! The parent section inherits configuration from Spring Boot.
    spring-boot-starter-parent provides:

    1. DEFAULT VERSIONS: Manages versions of all Spring Boot dependencies
    2. JAVA VERSION: Sets default Java compiler version
    3. ENCODING: Sets UTF-8 as default encoding
    4. PLUGIN CONFIGURATION: Pre-configures Maven plugins
    5. DEPENDENCY MANAGEMENT: No need to specify versions for Spring Boot dependencies
    6. SENSIBLE DEFAULTS: Reasonable default configurations

    Think of it as inheriting from a "template" that Spring Boot provides
    -->
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.5.5</version>
		<relativePath/> <!-- This tells Maven to look in the repository, not locally -->
	</parent>

	<!--
    ===========================================
    PROJECT COORDINATES (GAV)
    ===========================================

    These 3 elements uniquely identify your project in the Maven world:
    G.A.V = GroupId.ArtifactId.Version
    -->

	<!--
    GROUP ID: Usually your company's reverse domain name
    Like a package name - identifies who created this project
    -->
	<groupId>com.MyCompany</groupId>

	<!--
    ARTIFACT ID: The name of your project/jar file
    This will be the name of your final JAR file
    -->
	<artifactId>DemoSpringBootProject</artifactId>

	<!--
    VERSION: Current version of your project
    SNAPSHOT means it's in development (not a final release)
    -->
	<version>0.0.1-SNAPSHOT</version>

	<!--
    ===========================================
    PROJECT INFORMATION
    ===========================================
    -->

	<!-- Human-readable name for your project -->
	<name>DemoSpringBootProject</name>

	<!-- Description of what your project does -->
	<description>Demo project for Spring Boot - A sample web application</description>

	<!-- Project website URL (optional) -->
	<url>https://github.com/yourcompany/DemoSpringBootProject</url>

	<!--
    LICENSE INFORMATION (optional but recommended)
    Specify what license your project uses
    -->
	<licenses>
		<license>
			<name>MIT License</name>
			<url>https://opensource.org/licenses/MIT</url>
		</license>
	</licenses>

	<!--
    DEVELOPER INFORMATION (optional)
    Information about who develops this project
    -->
	<developers>
		<developer>
			<id>yourname</id>
			<name>Your Full Name</name>
			<email>your.email@company.com</email>
			<organization>MyCompany</organization>
		</developer>
	</developers>

	<!--
    SOURCE CODE MANAGEMENT (optional)
    Information about your version control system
    -->
	<scm>
		<connection>scm:git:git://github.com/yourcompany/DemoSpringBootProject.git</connection>
		<developerConnection>scm:git:ssh://github.com:yourcompany/DemoSpringBootProject.git</developerConnection>
		<tag>HEAD</tag>
		<url>https://github.com/yourcompany/DemoSpringBootProject</url>
	</scm>

	<!--
    ===========================================
    PROPERTIES SECTION
    ===========================================

    Define variables that can be reused throughout the POM
    -->
	<properties>
		<!--
        JAVA VERSION: Specifies which Java version to use
        This overrides the default from spring-boot-starter-parent if needed
        -->
		<java.version>17</java.version>

		<!-- You can define custom properties here -->
		<maven.compiler.source>17</maven.compiler.source>
		<maven.compiler.target>17</maven.compiler.target>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	<!--
    ===========================================
    DEPENDENCIES SECTION
    ===========================================

    This is where you list all the libraries (JARs) your project needs.
    Maven will automatically download these and their dependencies.
    -->
	<dependencies>

		<!--
        SPRING BOOT WEB STARTER
        This is a "starter" dependency that includes everything you need for web development:
        - Spring MVC (for creating REST APIs and web controllers)
        - Tomcat (embedded web server)
        - Spring Boot auto-configuration
        - Jackson (for JSON processing)
        - Validation support

        Notice: No version specified! It's inherited from spring-boot-starter-parent
        -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<!--
        SPRING BOOT TEST STARTER
        Includes everything you need for testing:
        - JUnit 5 (testing framework)
        - Mockito (for mocking)
        - Spring Test (for integration testing)
        - AssertJ (for assertions)
        - Hamcrest (for matchers)

        SCOPE: test means this dependency is only available during testing,
        not in the final packaged application
        -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!--
        EXAMPLE: You can add more dependencies here as needed
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        -->

	</dependencies>

	<!--
    ===========================================
    BUILD SECTION
    ===========================================

    Configures how Maven should build your project
    -->
	<build>
		<!--
        PLUGINS: Special programs that extend Maven's functionality
        -->
		<plugins>

			<!--
            SPRING BOOT MAVEN PLUGIN
            This plugin is ESSENTIAL for Spring Boot projects!

            What it does:
            1. EXECUTABLE JAR: Creates a "fat" JAR with all dependencies included
            2. SPRING BOOT RUN: Allows you to run "mvn spring-boot:run"
            3. REPACKAGING: Repackages your JAR to be executable with "java -jar"
            4. BUILD INFO: Can generate build information
            5. INTEGRATION WITH IDE: Better integration with development tools

            Without this plugin, you'd get a regular JAR that can't run standalone!
            -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<!--
                Configuration options (optional):
                <configuration>
                    <mainClass>com.MyCompany.DemoSpringBootProject.Application</mainClass>
                </configuration>
                -->
			</plugin>

		</plugins>
	</build>

</project>

		<!--
        ===========================================
        HOW TO USE THIS POM FILE:
        ===========================================

        1. COPY & PASTE: Copy this entire content into your pom.xml file

        2. CUSTOMIZE: Update these values for your project:
           - <groupId>com.YourCompany</groupId>
           - <artifactId>YourProjectName</artifactId>
           - <name>Your Project Name</name>
           - <description>Your project description</description>
           - Developer information
           - SCM information

        3. MAVEN COMMANDS you can run:
           - mvn clean compile          (compile your code)
           - mvn spring-boot:run        (run your application)
           - mvn clean package          (create JAR file)
           - mvn test                   (run tests)
           - java -jar target/your-app.jar  (run the built JAR)

        4. ADD MORE DEPENDENCIES as needed:
           Just add more <dependency> blocks in the <dependencies> section

        ===========================================
        WHAT HAPPENS WHEN YOU USE THIS POM:
        ===========================================

        1. Maven reads this file
        2. Downloads spring-boot-starter-parent and all its configurations
        3. Downloads spring-boot-starter-web and ALL its dependencies automatically
        4. Sets up your project structure
        5. Configures build plugins
        6. Makes your project ready to run as a Spring Boot application!

        This is the power of Maven + Spring Boot - minimal configuration, maximum functionality!
        -->
