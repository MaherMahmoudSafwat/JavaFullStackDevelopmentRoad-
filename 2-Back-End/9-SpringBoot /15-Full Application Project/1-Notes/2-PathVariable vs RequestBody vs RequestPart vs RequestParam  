Spring Boot Annotations Explained for Beginners

When building APIs in Spring Boot, you often need to handle different types of data coming from HTTP requests. The four main annotations for this are:

    @PathVariable ‚Üí Gets data from the URL path

    @RequestParam ‚Üí Gets data from URL query parameters (after ?)

    @RequestBody ‚Üí Gets data from the request body (usually JSON)

    @RequestPart ‚Üí Handles file uploads and multipart form data

Let‚Äôs break them down with simple examples.
1Ô∏è‚É£ @PathVariable ‚Äì Extract Values from the URL Path
When to use:

    When you need to get a value embedded in the URL itself (like an ID).

    Example: /users/123 ‚Üí 123 is the user ID.

Example Code:
java

@GetMapping("/users/{userId}")
public String getUser(@PathVariable Long userId) {
    return "User ID: " + userId;
}

Request Example:

üîπ GET /users/5
üîπ Output: "User ID: 5"
2Ô∏è‚É£ @RequestParam ‚Äì Extract Query Parameters
When to use:

    When you need optional or filter parameters (like ?name=John).

    Example: /search?query=spring&page=1

Example Code:
java

@GetMapping("/search")
public String search(
    @RequestParam String query,
    @RequestParam(defaultValue = "1") int page
) {
    return "Searching for '" + query + "' on page " + page;
}

Request Example:

üîπ GET /search?query=spring&page=2
üîπ Output: "Searching for 'spring' on page 2"
3Ô∏è‚É£ @RequestBody ‚Äì Extract JSON Data from the Request Body
When to use:

    When you need to send structured data (like JSON) in POST/PUT requests.

    Example: Submitting a form or sending API data.

Example Code:
java

@PostMapping("/users")
public String createUser(@RequestBody User user) {
    return "Created user: " + user.getName();
}

Request Example:

üîπ POST /users
üîπ Body (JSON):
json

{ "name": "Alice", "age": 25 }

üîπ Output: "Created user: Alice"
4Ô∏è‚É£ @RequestPart ‚Äì Handle File Uploads & Multipart Data
When to use:

    When uploading files (images, PDFs, etc.) along with form data.

    Example: A profile picture upload with user details.

Example Code:
java

@PostMapping("/upload")
public String uploadFile(
    @RequestPart("file") MultipartFile file,
    @RequestPart("user") String userData
) {
    return "Uploaded " + file.getOriginalFilename() + " with data: " + userData;
}

Request Example:

üîπ POST /upload (using multipart/form-data)
üîπ Parts:

    file ‚Üí profile.jpg

    user ‚Üí { "name": "Bob" }
    üîπ Output: "Uploaded profile.jpg with data: { "name": "Bob" }"

üìå Quick Comparison Table
Annotation	Source	Use Case	Example Request
@PathVariable	URL path (/users/{id})	Getting resources by ID	GET /users/5
@RequestParam	URL query (?name=John)	Filters, optional parameters	GET /search?query=spring
@RequestBody	Request body (JSON)	Sending structured data (POST/PUT)	POST /users with JSON body
@RequestPart	Multipart form data	File uploads with metadata	POST /upload with file + JSON
üí° Key Takeaways for Beginners

‚úÖ Use @PathVariable ‚Üí When you need a value from the URL path (like /users/5).
‚úÖ Use @RequestParam ‚Üí When you need optional query parameters (like ?name=John).
‚úÖ Use @RequestBody ‚Üí When receiving JSON data (like in POST requests).
‚úÖ Use @RequestPart ‚Üí When uploading files (like images or PDFs).


Let me break down a complete beginner-friendly example of file uploads in Spring Boot using @RequestPart and MultipartFile. I'll explain each step clearly.
1Ô∏è‚É£ How @RequestPart Works (Flow Diagram)
text

[Client (Browser/Postman)]
       ‚Üì (Sends multipart/form-data)
[Spring Boot Controller]
       ‚Üì (Uses @RequestPart)
[Server Processes File]
       ‚Üì (Saves to disk/database)
[Returns Response]

2Ô∏è‚É£ Full Example Code
Step 1: Create a Spring Boot Controller
java

import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;
import java.nio.file.*;

@RestController
public class FileUploadController {

    // Define where to save files
    private static final String UPLOAD_DIR = "uploads/";

    @PostMapping("/upload")
    public String handleFileUpload(
            @RequestPart("file") MultipartFile file,
            @RequestPart("description") String description) throws IOException {

        // 1. Create upload directory if it doesn't exist
        Path uploadPath = Paths.get(UPLOAD_DIR);
        if (!Files.exists(uploadPath)) {
            Files.createDirectories(uploadPath);
        }

        // 2. Save the file
        Path filePath = uploadPath.resolve(file.getOriginalFilename());
        Files.write(filePath, file.getBytes());

        // 3. Return success message
        return "File uploaded successfully!\n" +
               "Filename: " + file.getOriginalFilename() + "\n" +
               "Description: " + description + "\n" +
               "Size: " + file.getSize() + " bytes";
    }
}

Step 2: Configure Maximum File Size

Add to application.properties:
properties

# Increase file size limits (default is only 1MB)
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

3Ô∏è‚É£ Testing with Postman

    Set up the request:

        Method: POST

        URL: http://localhost:8080/upload

        Body: form-data

    Add two parts:

        file (File type): Select any file (image, PDF, etc.)

        description (Text type): Enter any description

    Send the request

Example Response:
text

File uploaded successfully!
Filename: example.jpg
Description: My vacation photo
Size: 248576 bytes

4Ô∏è‚É£ What Happens Behind the Scenes?
Detailed Code Flow:

    Client sends request

        The browser/Postman sends data in multipart/form-data format

        This format allows mixing files with regular text data

    Spring receives the request

        @RequestPart("file") ‚Üí Binds the uploaded file to a MultipartFile object

        @RequestPart("description") ‚Üí Binds the text field to a String

    Server processes the file

        file.getOriginalFilename() ‚Üí Gets the original filename

        file.getBytes() ‚Üí Gets the file content as bytes

        Files.write() ‚Üí Saves the file to the server

    Response is returned

        Confirmation message with file details

5Ô∏è‚É£ Key Concepts Explained
A. MultipartFile Methods
Method	Description	Example
getOriginalFilename()	Original filename	"document.pdf"
getBytes()	File content as byte[]	file.getBytes()
getSize()	File size in bytes	1024 (1KB)
getContentType()	MIME type	"image/jpeg"
B. Where Files Are Saved

    In this example, files are saved to an uploads/ directory in your project

    Check the directory after uploading!

C. Handling Different File Types

The same code works for:

    Images (.jpg, .png)

    Documents (.pdf, .docx)

    Audio (.mp3)

    Video (.mp4)

6Ô∏è‚É£ Common Errors & Fixes

    File size too large
    ‚Üí Increase limits in application.properties

    Missing upload directory
    ‚Üí The code automatically creates uploads/

    Wrong part names
    ‚Üí Ensure @RequestPart("file") matches Postman's part name

7Ô∏è‚É£ Advanced: Returning the Uploaded File
java

@GetMapping("/files/{filename}")
public ResponseEntity<Resource> getFile(@PathVariable String filename) throws IOException {
    Path filePath = Paths.get(UPLOAD_DIR).resolve(filename);
    Resource resource = new UrlResource(filePath.toUri());
    
    return ResponseEntity.ok()
            .contentType(MediaType.APPLICATION_OCTET_STREAM)
            .header("Content-Disposition", "attachment; filename=\"" + resource.getFilename() + "\"")
            .body(resource);
}

Now you can download files at:
http://localhost:8080/files/yourfile.ext
üìå Summary

    Use @RequestPart for file uploads in multipart/form-data requests

    MultipartFile gives you access to file contents

    Files can be saved to disk or database

    Same code works for all file types

Using @RequestBody Instead of @RequestPart for Product Updates

Let me explain what would happen if you tried using @RequestBody with @RequestPart in your product update endpoint, and why the current approach is correct.
‚ùå Problem: Mixing @RequestBody and @RequestPart

If you modify your code like this:
java

@PutMapping("/product/{id}")
public ResponseEntity<String> updateProduct(
    @PathVariable int id,
    @RequestBody Product product,  // Changed to @RequestBody
    @RequestPart MultipartFile imageFile
) {
    // ... same logic
}

What Would Happen?

    This code would fail with a 400 Bad Request error because:

        @RequestBody expects JSON data in the request body

        @RequestPart expects multipart form data

        These two are incompatible in the same request

    Spring wouldn't know how to parse the request since:

        A multipart/form-data request can't contain a raw JSON body

        A JSON body request can't contain file uploads

‚úÖ Correct Approach: Using @RequestPart for Both

Your original code is correct:
java

@PutMapping("/product/{id}")
public ResponseEntity<String> updateProduct(
    @PathVariable int id,
    @RequestPart Product product,  // Product as JSON part
    @RequestPart MultipartFile imageFile  // File as binary part
) {
    // ... implementation
}

Why This Works:

    The client must send multipart/form-data with two parts:

        A JSON part named product containing the product data

        A file part named imageFile containing the image

    Example HTTP Request Structure:
    text

    POST /product/123
    Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryABC123

    ----WebKitFormBoundaryABC123
    Content-Disposition: form-data; name="product"; filename=""
    Content-Type: application/json

    {"id":123,"name":"Updated Product","price":29.99}
    ----WebKitFormBoundaryABC123
    Content-Disposition: form-data; name="imageFile"; filename="product.jpg"
    Content-Type: image/jpeg

    [BINARY IMAGE DATA HERE]
    ----WebKitFormBoundaryABC123--

    Spring automatically:

        Converts the JSON part into a Product object

        Maps the file part to a MultipartFile

üîπ Alternative Solutions

If you really want to use @RequestBody, you have two options:
Option 1: Send Base64-encoded Image in JSON
java

@PutMapping("/product/{id}")
public ResponseEntity<String> updateProduct(
    @PathVariable int id,
    @RequestBody ProductWithImage request  // Custom DTO
) {
    // Decode base64 image and process
}

Request Body:
json

{
  "name": "New Product",
  "price": 19.99,
  "image": "base64-encoded-image-data"
}

‚ö† Downsides:

    Larger request size (base64 adds ~33% overhead)

    Harder to stream large files

Option 2: Separate Endpoints

    First update product details (JSON):
    java

@PutMapping("/product/{id}/details")
public ResponseEntity<String> updateDetails(
    @PathVariable int id,
    @RequestBody Product product
)

Then upload image separately:
java

    @PutMapping("/product/{id}/image")
    public ResponseEntity<String> updateImage(
        @PathVariable int id,
        @RequestPart MultipartFile imageFile
    )

üìå Key Takeaways

    @RequestPart is required when mixing JSON + file uploads in one request.

    @RequestBody only works for pure JSON requests (no files).

    Your original code is correct - it's the standard way to handle this case.

    Alternatives exist (base64 or separate endpoints) but have tradeoffs.

Best Practice Recommendation

Stick with your current implementation using @RequestPart for both fields. This is:

    Standard REST practice

    Efficient (no base64 overhead)

    Supported by all HTTP clients (Postman, browsers, mobile apps)

Understanding @RequestPart("file") and multipart/form-data

Let me explain these concepts in simple terms with practical examples.
1Ô∏è‚É£ Why @RequestPart("file") Needs a Parameter
What the Parameter Means
java

@PostMapping("/upload")
public String uploadFile(@RequestPart("file") MultipartFile file) {
    // ...
}

    The "file" inside @RequestPart("file") refers to the name of the form field in the HTTP request.

    This must match exactly what the client sends.

How It Works

    When a client submits a file upload, the HTML form or API client assigns a name to the file part:
    html

    <!-- HTML Form Example -->
    <form method="post" enctype="multipart/form-data">
      <input type="file" name="file">  <!-- 'name="file"' matches @RequestPart("file") -->
      <input type="submit">
    </form>

    Spring looks for a part named "file" in the request and maps it to your MultipartFile parameter.

Key Points

    If the names don't match, Spring won't find the file (error 400).

    You can use any name (e.g., @RequestPart("profile_pic") if the client sends profile_pic).

2Ô∏è‚É£ What is multipart/form-data?
Simple Explanation

Imagine mailing a package with:

    A document (your JSON/text data)

    A photo (your file)

    A voice recording (another file)

multipart/form-data is like that package - it lets you send multiple different pieces of data in one HTTP request.
Technical Breakdown

    Content-Type Header:
    text

Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryABC123

    boundary separates different parts of the request.

Request Body Structure:
text

    ----WebKitFormBoundaryABC123
    Content-Disposition: form-data; name="product"; filename=""
    Content-Type: application/json

    {"name":"Phone","price":599}
    ----WebKitFormBoundaryABC123
    Content-Disposition: form-data; name="image"; filename="phone.jpg"
    Content-Type: image/jpeg

    [BINARY IMAGE DATA]
    ----WebKitFormBoundaryABC123--

When to Use It

    File uploads (images, PDFs, etc.)

    Forms that mix files with text/JSON data

    APIs that need to receive both metadata and binary data

3Ô∏è‚É£ Practical Example
Backend Code
java

@PostMapping("/upload-product")
public String uploadProduct(
    @RequestPart("product") Product product,  // JSON part
    @RequestPart("image") MultipartFile image // File part
) {
    return "Product: " + product.getName() + 
           ", Image Size: " + image.getSize() + " bytes";
}

Testing with Postman

    Set POST to /upload-product

    Set Body > form-data

    Add two parts:

        Key: product (type Text), Value: {"name":"Laptop","price":999}

        Key: image (type File), Select a file

Result
text

Product: Laptop, Image Size: 248576 bytes

4Ô∏è‚É£ Common Mistakes & Fixes
Mistake	Symptom	Fix
@RequestPart("file") but client sends "image"	400 Bad Request	Match the names
Missing enctype="multipart/form-data" in HTML forms	File is empty	Add the attribute
Forgetting @RequestPart annotation	Null file	Add the annotation
File size exceeds server limit	413 Payload Too Large	Increase spring.servlet.multipart.max-file-size
5Ô∏è‚É£ Key Takeaways

    @RequestPart("name") must match the form field name from the client.

    multipart/form-data is like a digital package that can hold:

        JSON/text data

        Files (images, PDFs, etc.)

    Always verify:

        Names match between client and server

        Content-Type: multipart/form-data is set

        File size limits are configured



