H2 Database - The Lightweight, In-Memory SQL Database
What is H2?

H2 is an open-source, embedded, in-memory relational database written in Java. It is widely used for:

    Development & Testing (fast, no setup needed)

    Prototyping (quickly spin up a DB)

    Spring Boot applications (default choice for local development)

Key Features of H2
Feature	Description
In-Memory Mode	Data is stored in RAM (not persisted to disk)
Embedded Mode	Runs inside the same JVM as your app (no separate DB server)
File-Based Mode	Stores data in a file (persistent storage)
Server Mode	Can run as a standalone database server
SQL Compatibility	Supports standard SQL, JDBC, and even PostgreSQL/Oracle modes
Web Console	Built-in GUI to view and query the database
Why Use H2?

✅ Zero Configuration – Works out of the box in Spring Boot.
✅ Fast – No disk I/O in in-memory mode.
✅ Great for Testing – Reset the DB with every test run.
✅ Lightweight – Only ~2MB JAR file.
✅ Supports Transactions – ACID-compliant.
H2 in Spring Boot

Spring Boot auto-configures H2 if:

    You include the h2 dependency.

    No other database (like MySQL/PostgreSQL) is configured.

1. Add H2 Dependency (Maven)
xml

<dependency>
    <groupId>com.h2database</groupId>
    <artifactId>h2</artifactId>
    <scope>runtime</scope>
</dependency>

2. Configure application.properties
properties

# Enable H2 in-memory DB
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password

# Enable H2 Console (GUI)
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

3. Access the H2 Console

    Open: http://localhost:8080/h2-console

    Enter JDBC URL: jdbc:h2:mem:testdb

    Username: sa

    Password: password

H2 Modes
Mode	JDBC URL Format	Use Case
In-Memory	jdbc:h2:mem:dbname	Temporary DB (data lost on app restart)
File-Based	jdbc:h2:file:/path/to/db	Persistent storage
Server Mode	jdbc:h2:tcp://localhost:9092/mem:dbname	Multiple apps can connect
Example: Using H2 with Spring Boot
1. Define an Entity
java

@Entity
public class User {
    @Id
    @GeneratedValue
    private Long id;
    private String name;
    private String email;
    // Getters & Setters
}

2. Create a Repository
java

@Repository
public interface UserRepository extends JpaRepository<User, Long> {
    User findByName(String name);
}

3. Test It!
java

@SpringBootTest
public class UserRepositoryTest {
    @Autowired
    private UserRepository userRepo;

    @Test
    public void testSaveUser() {
        User user = new User(null, "John", "john@example.com");
        userRepo.save(user);
        User found = userRepo.findByName("John");
        assertNotNull(found);
    }
}

→ The test runs without needing a real database (H2 handles it in memory).
When NOT to Use H2

❌ Production – Not designed for high traffic.
❌ Multi-Node Systems – In-memory DB is per-JVM.
❌ Large Datasets – Limited by available RAM.
Alternatives to H2

    SQLite (File-based, good for mobile/desktop apps)

    HSQLDB (Similar to H2, but older)

    PostgreSQL/MySQL (For production apps)

Summary

    H2 = Fast, embedded, in-memory SQL DB

    Perfect for Spring Boot development & testing

    Auto-configured with Spring Boot

    Provides a web console (/h2-console)

    Not for production use



