What is a DataSource?

A DataSource in Java (and Spring) is an abstraction that represents a connection to a database. It provides a standard way to:

    Obtain database connections (Connection objects).

    Manage connection pooling (for better performance).

    Configure database credentials (URL, username, password).

Why Use a DataSource?

✅ Decouples application code from raw JDBC DriverManager.
✅ Supports connection pooling (reuses connections instead of creating new ones each time).
✅ Centralizes database configuration (URL, username, password in one place).
Types of DataSource
Type	Description	Use Case
Basic DataSource	Simple implementation (no pooling)	Testing, simple apps
Connection-Pooled DataSource	Manages a pool of reusable connections (e.g., HikariCP, Tomcat JDBC)	Production apps
Distributed DataSource	Supports XA transactions (for distributed systems)	Microservices, distributed DBs
How DataSource Works in Spring

Spring Boot auto-configures a DataSource if:

    You include a JDBC driver (e.g., H2, MySQL, PostgreSQL).

    Define database properties in application.properties.

Example: Configuring H2 DataSource
properties

# application.properties
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password

Spring Boot automatically creates a DataSource bean with these settings.
Key DataSource Methods
Method	Description
Connection getConnection()	Gets a DB connection (from the pool if enabled).
void setUrl(String url)	Sets the database URL.
void setUsername(String username)	Sets the DB username.
Connection Pooling with DataSource

Instead of creating a new connection every time:

    Connection pool (e.g., HikariCP) maintains a set of open connections.

    When your app needs a connection:

        Borrows one from the pool.

        Returns it after use (instead of closing it).

Popular Connection Pools

    HikariCP (Default in Spring Boot – fastest)

    Tomcat JDBC Pool

    Commons DBCP2

Example: DataSource in Spring JDBC
java

@Repository
public class UserRepository {
    private final JdbcTemplate jdbcTemplate;

    // Spring injects the auto-configured DataSource
    public UserRepository(DataSource dataSource) {
        this.jdbcTemplate = new JdbcTemplate(dataSource);
    }

    public List<User> findAll() {
        return jdbcTemplate.query("SELECT * FROM users", new UserRowMapper());
    }
}

Manually Defining a DataSource (Without Spring Boot)
java

@Configuration
public class AppConfig {
    @Bean
    public DataSource dataSource() {
        // Using HikariCP (best for production)
        HikariDataSource dataSource = new HikariDataSource();
        dataSource.setJdbcUrl("jdbc:mysql://localhost:3306/mydb");
        dataSource.setUsername("user");
        dataSource.setPassword("pass");
        dataSource.setMaximumPoolSize(10); // Pool size
        return dataSource;
    }
}

DataSource vs DriverManager (Old JDBC Way)
Feature	DataSource	DriverManager
Connection Pooling	✅ Yes	❌ No
Performance	✅ High (reuses connections)	❌ Low (new connection per call)
Configuration	✅ Centralized (Spring-friendly)	❌ Hardcoded in code
Production-Ready	✅ Yes	❌ No
Summary

    DataSource = A factory for database connections.

    Used by JdbcTemplate, Hibernate, JPA under the hood.

    Supports connection pooling (critical for production apps).

    Auto-configured in Spring Boot (just define spring.datasource.* properties).




