# Complete Java Enterprise Technologies Guide
## Prerequisites for Spring Boot Mastery

### دليل شامل لتقنيات جافا المؤسسية - متطلبات Spring Boot الأساسية

---

## Table of Contents / جدول المحتويات

1. [Maven](#maven)
2. [JDBC](#jdbc)
3. [Hibernate](#hibernate)
4. [Spring Framework](#spring-framework)
5. [Spring Core](#spring-core)
6. [Spring JDBC](#spring-jdbc)
7. [Spring Configuration Types](#spring-configuration-types)
8. [JSP (JavaServer Pages)](#jsp)
9. [Servlets](#servlets)
10. [JEE/J2EE](#jeej2ee)
11. [MVC Pattern](#mvc-pattern)
12. [MVC with Spring](#mvc-with-spring)
13. [Interview Questions & Answers](#interview-questions--answers)

---

## Maven

### What is Maven? / ما هو Maven؟

**English:**
Maven is a build automation and project management tool primarily used for Java projects. It simplifies the build process by providing a standard directory layout, dependency management, and build lifecycle.

**Arabic:**
Maven هو أداة لأتمتة البناء وإدارة المشاريع تُستخدم بشكل أساسي لمشاريع Java. يبسط عملية البناء من خلال توفير تخطيط دليل قياسي وإدارة التبعيات ودورة حياة البناء.

### Key Concepts / المفاهيم الأساسية

#### 1. POM (Project Object Model)
**English:** The fundamental unit in Maven, defined in `pom.xml` file.

**Arabic:** الوحدة الأساسية في Maven، يتم تعريفها في ملف `pom.xml`.

```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
         http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    
    <groupId>com.example</groupId>
    <artifactId>my-app</artifactId>
    <version>1.0.0</version>
    <packaging>jar</packaging>
    
    <properties>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
    </properties>
    
    <dependencies>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13.2</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>
```

#### 2. Directory Structure / هيكل الدلائل
```
project-root/
├── pom.xml
├── src/
│   ├── main/
│   │   ├── java/
│   │   └── resources/
│   └── test/
│       ├── java/
│       └── resources/
└── target/
```

#### 3. Build Lifecycle / دورة حياة البناء
- **validate**: Validates project structure / التحقق من هيكل المشروع
- **compile**: Compiles source code / ترجمة الكود المصدري
- **test**: Runs unit tests / تشغيل الاختبارات
- **package**: Creates JAR/WAR / إنشاء JAR/WAR
- **install**: Installs to local repository / التثبيت في المستودع المحلي
- **deploy**: Deploys to remote repository / النشر في المستودع البعيد

---

## JDBC

### What is JDBC? / ما هو JDBC؟

**English:**
JDBC (Java Database Connectivity) is a Java API that enables Java applications to interact with databases. It provides methods for querying and updating data in a database.

**Arabic:**
JDBC (Java Database Connectivity) هو واجهة برمجة تطبيقات Java تمكن تطبيقات Java من التفاعل مع قواعد البيانات. يوفر طرق للاستعلام وتحديث البيانات في قاعدة البيانات.

### Core Components / المكونات الأساسية

#### 1. Driver Manager
```java
// Loading MySQL driver
Class.forName("com.mysql.cj.jdbc.Driver");

// Establishing connection
Connection connection = DriverManager.getConnection(
    "jdbc:mysql://localhost:3306/mydb", 
    "username", 
    "password"
);
```

#### 2. Connection Interface
```java
public class DatabaseConnection {
    private static final String URL = "jdbc:mysql://localhost:3306/mydb";
    private static final String USERNAME = "root";
    private static final String PASSWORD = "password";
    
    public static Connection getConnection() throws SQLException {
        return DriverManager.getConnection(URL, USERNAME, PASSWORD);
    }
}
```

#### 3. Statement Types / أنواع البيانات

**Statement:**
```java
Statement stmt = connection.createStatement();
ResultSet rs = stmt.executeQuery("SELECT * FROM users");
```

**PreparedStatement:**
```java
String sql = "SELECT * FROM users WHERE id = ?";
PreparedStatement pstmt = connection.prepareStatement(sql);
pstmt.setInt(1, userId);
ResultSet rs = pstmt.executeQuery();
```

**CallableStatement:**
```java
CallableStatement cstmt = connection.prepareCall("{call getUserById(?)}");
cstmt.setInt(1, userId);
ResultSet rs = cstmt.executeQuery();
```

#### 4. Complete CRUD Example / مثال كامل لعمليات CRUD

```java
public class UserDAO {
    
    public void createUser(User user) throws SQLException {
        String sql = "INSERT INTO users (name, email) VALUES (?, ?)";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            
            pstmt.setString(1, user.getName());
            pstmt.setString(2, user.getEmail());
            pstmt.executeUpdate();
        }
    }
    
    public User getUserById(int id) throws SQLException {
        String sql = "SELECT * FROM users WHERE id = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            
            pstmt.setInt(1, id);
            ResultSet rs = pstmt.executeQuery();
            
            if (rs.next()) {
                User user = new User();
                user.setId(rs.getInt("id"));
                user.setName(rs.getString("name"));
                user.setEmail(rs.getString("email"));
                return user;
            }
        }
        return null;
    }
    
    public void updateUser(User user) throws SQLException {
        String sql = "UPDATE users SET name = ?, email = ? WHERE id = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            
            pstmt.setString(1, user.getName());
            pstmt.setString(2, user.getEmail());
            pstmt.setInt(3, user.getId());
            pstmt.executeUpdate();
        }
    }
    
    public void deleteUser(int id) throws SQLException {
        String sql = "DELETE FROM users WHERE id = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            
            pstmt.setInt(1, id);
            pstmt.executeUpdate();
        }
    }
}
```

### Best Practices / أفضل الممارسات

1. **Always use try-with-resources** / استخدم دائماً try-with-resources
2. **Use PreparedStatement over Statement** / استخدم PreparedStatement بدلاً من Statement
3. **Handle SQLException properly** / تعامل مع SQLException بشكل صحيح
4. **Close resources in reverse order** / أغلق الموارد بترتيب عكسي

---

## Hibernate

### What is Hibernate? / ما هو Hibernate؟

**English:**
Hibernate is an Object-Relational Mapping (ORM) framework that simplifies database operations by mapping Java objects to database tables. It eliminates the need to write boilerplate SQL code.

**Arabic:**
Hibernate هو إطار عمل Object-Relational Mapping (ORM) يبسط عمليات قاعدة البيانات من خلال ربط كائنات Java بجداول قاعدة البيانات. يلغي الحاجة لكتابة كود SQL التكراري.

### Key Features / الميزات الأساسية

1. **Automatic SQL Generation** / إنشاء SQL تلقائياً
2. **Lazy Loading** / التحميل الكسول
3. **Caching** / التخزين المؤقت
4. **Transaction Management** / إدارة المعاملات
5. **HQL (Hibernate Query Language)** / لغة استعلام Hibernate

### Configuration / التكوين

#### hibernate.cfg.xml
```xml
<!DOCTYPE hibernate-configuration PUBLIC
        "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
        <!-- Database connection properties -->
        <property name="hibernate.connection.driver_class">com.mysql.cj.jdbc.Driver</property>
        <property name="hibernate.connection.url">jdbc:mysql://localhost:3306/mydb</property>
        <property name="hibernate.connection.username">root</property>
        <property name="hibernate.connection.password">password</property>
        
        <!-- Hibernate properties -->
        <property name="hibernate.dialect">org.hibernate.dialect.MySQLDialect</property>
        <property name="hibernate.hbm2ddl.auto">update</property>
        <property name="hibernate.show_sql">true</property>
        <property name="hibernate.format_sql">true</property>
        
        <!-- Mapping files -->
        <mapping class="com.example.entity.User"/>
    </session-factory>
</hibernate-configuration>
```

### Entity Mapping / ربط الكائنات

```java
@Entity
@Table(name = "users")
public class User {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @Column(name = "name", nullable = false, length = 100)
    private String name;
    
    @Column(name = "email", unique = true)
    private String email;
    
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "created_date")
    private Date createdDate;
    
    // Constructors, getters, and setters
    public User() {}
    
    public User(String name, String email) {
        this.name = name;
        this.email = email;
        this.createdDate = new Date();
    }
    
    // Getters and setters...
}
```

### Session and SessionFactory / Session و SessionFactory

```java
public class HibernateUtil {
    private static SessionFactory sessionFactory;
    
    static {
        try {
            Configuration configuration = new Configuration().configure();
            sessionFactory = configuration.buildSessionFactory();
        } catch (Exception e) {
            e.printStackTrace();
            throw new ExceptionInInitializerError(e);
        }
    }
    
    public static SessionFactory getSessionFactory() {
        return sessionFactory;
    }
    
    public static void shutdown() {
        getSessionFactory().close();
    }
}
```

### CRUD Operations / عمليات CRUD

```java
public class UserService {
    
    public void saveUser(User user) {
        Session session = HibernateUtil.getSessionFactory().openSession();
        Transaction transaction = null;
        
        try {
            transaction = session.beginTransaction();
            session.save(user);
            transaction.commit();
        } catch (Exception e) {
            if (transaction != null) {
                transaction.rollback();
            }
            e.printStackTrace();
        } finally {
            session.close();
        }
    }
    
    public User getUserById(Long id) {
        Session session = HibernateUtil.getSessionFactory().openSession();
        try {
            return session.get(User.class, id);
        } finally {
            session.close();
        }
    }
    
    public List<User> getAllUsers() {
        Session session = HibernateUtil.getSessionFactory().openSession();
        try {
            Query<User> query = session.createQuery("FROM User", User.class);
            return query.list();
        } finally {
            session.close();
        }
    }
    
    public void updateUser(User user) {
        Session session = HibernateUtil.getSessionFactory().openSession();
        Transaction transaction = null;
        
        try {
            transaction = session.beginTransaction();
            session.update(user);
            transaction.commit();
        } catch (Exception e) {
            if (transaction != null) {
                transaction.rollback();
            }
            e.printStackTrace();
        } finally {
            session.close();
        }
    }
    
    public void deleteUser(Long id) {
        Session session = HibernateUtil.getSessionFactory().openSession();
        Transaction transaction = null;
        
        try {
            transaction = session.beginTransaction();
            User user = session.get(User.class, id);
            if (user != null) {
                session.delete(user);
            }
            transaction.commit();
        } catch (Exception e) {
            if (transaction != null) {
                transaction.rollback();
            }
            e.printStackTrace();
        } finally {
            session.close();
        }
    }
}
```

### Relationships / العلاقات

#### One-to-Many / واحد إلى متعدد
```java
@Entity
public class Department {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    private String name;
    
    @OneToMany(mappedBy = "department", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List<Employee> employees = new ArrayList<>();
    
    // Constructors, getters, setters
}

@Entity
public class Employee {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    private String name;
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "department_id")
    private Department department;
    
    // Constructors, getters, setters
}
```

---

## Spring Framework

### What is Spring Framework? / ما هو Spring Framework؟

**English:**
Spring Framework is a comprehensive framework for enterprise Java development. It provides infrastructure support for developing Java applications with features like Dependency Injection, Aspect-Oriented Programming, and integration with other frameworks.

**Arabic:**
Spring Framework هو إطار عمل شامل لتطوير تطبيقات Java المؤسسية. يوفر دعم البنية التحتية لتطوير تطبيقات Java مع ميزات مثل حقن التبعية والبرمجة الموجهة للجوانب والتكامل مع أطر العمل الأخرى.

### Core Principles / المبادئ الأساسية

1. **Inversion of Control (IoC)** / عكس التحكم
2. **Dependency Injection (DI)** / حقن التبعية
3. **Aspect-Oriented Programming (AOP)** / البرمجة الموجهة للجوانب
4. **Template Method Pattern** / نمط طريقة القالب

---

## Spring Core

### IoC Container / حاوي IoC

**English:**
The IoC container is the heart of Spring Framework. It creates objects, configures them, and manages their complete lifecycle.

**Arabic:**
حاوي IoC هو قلب Spring Framework. ينشئ الكائنات ويكوّنها ويدير دورة حياتها الكاملة.

#### ApplicationContext
```java
public class SpringApplication {
    public static void main(String[] args) {
        // Loading Spring context
        ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");
        
        // Getting bean from container
        UserService userService = context.getBean("userService", UserService.class);
        
        // Using the service
        userService.createUser(new User("John", "john@example.com"));
    }
}
```

### Bean Definition / تعريف Bean

#### XML Configuration / تكوين XML
```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- Simple bean definition -->
    <bean id="userService" class="com.example.service.UserService">
        <property name="userRepository" ref="userRepository"/>
    </bean>
    
    <bean id="userRepository" class="com.example.repository.UserRepositoryImpl"/>
    
    <!-- Bean with constructor injection -->
    <bean id="orderService" class="com.example.service.OrderService">
        <constructor-arg ref="orderRepository"/>
        <constructor-arg value="Premium"/>
    </bean>
    
    <!-- Bean with properties -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/mydb"/>
        <property name="username" value="root"/>
        <property name="password" value="password"/>
    </bean>
</beans>
```

### Dependency Injection Types / أنواع حقن التبعية

#### 1. Constructor Injection / حقن المنشئ
```java
@Service
public class UserService {
    private final UserRepository userRepository;
    private final EmailService emailService;
    
    // Constructor injection
    public UserService(UserRepository userRepository, EmailService emailService) {
        this.userRepository = userRepository;
        this.emailService = emailService;
    }
    
    public void createUser(User user) {
        userRepository.save(user);
        emailService.sendWelcomeEmail(user.getEmail());
    }
}
```

#### 2. Setter Injection / حقن المُجَمِّعات
```java
@Service
public class OrderService {
    private OrderRepository orderRepository;
    private PaymentService paymentService;
    
    // Setter injection
    @Autowired
    public void setOrderRepository(OrderRepository orderRepository) {
        this.orderRepository = orderRepository;
    }
    
    @Autowired
    public void setPaymentService(PaymentService paymentService) {
        this.paymentService = paymentService;
    }
}
```

#### 3. Field Injection / حقن الحقل
```java
@Service
public class NotificationService {
    
    @Autowired
    private EmailService emailService;
    
    @Autowired
    private SMSService smsService;
    
    public void sendNotification(String message, String recipient) {
        emailService.sendEmail(message, recipient);
        smsService.sendSMS(message, recipient);
    }
}
```

### Bean Scopes / نطاقات Bean

```java
// Singleton scope (default)
@Component
@Scope("singleton")
public class DatabaseConnection {
    // Single instance for entire application
}

// Prototype scope
@Component
@Scope("prototype")
public class ShoppingCart {
    // New instance every time requested
}

// Request scope (web applications)
@Component
@Scope("request")
public class UserSession {
    // New instance per HTTP request
}

// Session scope (web applications)
@Component
@Scope("session")
public class UserProfile {
    // New instance per HTTP session
}
```

---

## Spring JDBC

### What is Spring JDBC? / ما هو Spring JDBC؟

**English:**
Spring JDBC provides a simplified approach to database access by handling resource management and exception handling automatically, while still giving you control over SQL.

**Arabic:**
Spring JDBC يوفر نهجاً مبسطاً للوصول لقاعدة البيانات من خلال التعامل مع إدارة الموارد ومعالجة الاستثناءات تلقائياً، مع إعطائك السيطرة على SQL.

### JdbcTemplate

```java
@Configuration
public class DatabaseConfig {
    
    @Bean
    public DataSource dataSource() {
        DriverManagerDataSource dataSource = new DriverManagerDataSource();
        dataSource.setDriverClassName("com.mysql.cj.jdbc.Driver");
        dataSource.setUrl("jdbc:mysql://localhost:3306/mydb");
        dataSource.setUsername("root");
        dataSource.setPassword("password");
        return dataSource;
    }
    
    @Bean
    public JdbcTemplate jdbcTemplate(DataSource dataSource) {
        return new JdbcTemplate(dataSource);
    }
}
```

### Repository Implementation / تنفيذ Repository

```java
@Repository
public class UserRepositoryImpl implements UserRepository {
    
    @Autowired
    private JdbcTemplate jdbcTemplate;
    
    @Override
    public void save(User user) {
        String sql = "INSERT INTO users (name, email) VALUES (?, ?)";
        jdbcTemplate.update(sql, user.getName(), user.getEmail());
    }
    
    @Override
    public User findById(Long id) {
        String sql = "SELECT * FROM users WHERE id = ?";
        return jdbcTemplate.queryForObject(sql, new UserRowMapper(), id);
    }
    
    @Override
    public List<User> findAll() {
        String sql = "SELECT * FROM users";
        return jdbcTemplate.query(sql, new UserRowMapper());
    }
    
    @Override
    public void update(User user) {
        String sql = "UPDATE users SET name = ?, email = ? WHERE id = ?";
        jdbcTemplate.update(sql, user.getName(), user.getEmail(), user.getId());
    }
    
    @Override
    public void deleteById(Long id) {
        String sql = "DELETE FROM users WHERE id = ?";
        jdbcTemplate.update(sql, id);
    }
    
    @Override
    public int count() {
        String sql = "SELECT COUNT(*) FROM users";
        return jdbcTemplate.queryForObject(sql, Integer.class);
    }
}
```

### RowMapper / مُحوِّل الصف

```java
public class UserRowMapper implements RowMapper<User> {
    
    @Override
    public User mapRow(ResultSet rs, int rowNum) throws SQLException {
        User user = new User();
        user.setId(rs.getLong("id"));
        user.setName(rs.getString("name"));
        user.setEmail(rs.getString("email"));
        user.setCreatedDate(rs.getTimestamp("created_date"));
        return user;
    }
}
```

### Named Parameter JDBC Template / قالب JDBC للمعاملات المسماة

```java
@Repository
public class ProductRepositoryImpl implements ProductRepository {
    
    @Autowired
    private NamedParameterJdbcTemplate namedParameterJdbcTemplate;
    
    public List<Product> findByCategory(String category) {
        String sql = "SELECT * FROM products WHERE category = :category";
        Map<String, Object> params = new HashMap<>();
        params.put("category", category);
        
        return namedParameterJdbcTemplate.query(sql, params, new ProductRowMapper());
    }
    
    public void saveProduct(Product product) {
        String sql = "INSERT INTO products (name, price, category) VALUES (:name, :price, :category)";
        
        MapSqlParameterSource params = new MapSqlParameterSource();
        params.addValue("name", product.getName());
        params.addValue("price", product.getPrice());
        params.addValue("category", product.getCategory());
        
        namedParameterJdbcTemplate.update(sql, params);
    }
}
```

---

## Spring Configuration Types

### 1. XML Configuration / تكوين XML

#### applicationContext.xml
```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- Enable component scanning -->
    <context:component-scan base-package="com.example"/>
    
    <!-- Bean definitions -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${db.driver}"/>
        <property name="url" value="${db.url}"/>
        <property name="username" value="${db.username}"/>
        <property name="password" value="${db.password}"/>
    </bean>
    
    <!-- Property placeholder -->
    <context:property-placeholder location="classpath:database.properties"/>
</beans>
```

### 2. Annotation-based Configuration / تكوين قائم على التعليقات التوضيحية

```java
@Configuration
@ComponentScan(basePackages = "com.example")
@PropertySource("classpath:application.properties")
public class AppConfig {
    
    @Value("${db.driver}")
    private String driverClassName;
    
    @Value("${db.url}")
    private String url;
    
    @Value("${db.username}")
    private String username;
    
    @Value("${db.password}")
    private String password;
    
    @Bean
    public DataSource dataSource() {
        DriverManagerDataSource dataSource = new DriverManagerDataSource();
        dataSource.setDriverClassName(driverClassName);
        dataSource.setUrl(url);
        dataSource.setUsername(username);
        dataSource.setPassword(password);
        return dataSource;
    }
    
    @Bean
    public JdbcTemplate jdbcTemplate(DataSource dataSource) {
        return new JdbcTemplate(dataSource);
    }
}
```

### 3. Mixed Configuration / تكوين مختلط

```java
@Configuration
@ImportResource("classpath:applicationContext.xml")
@ComponentScan(basePackages = "com.example")
public class MixedConfig {
    
    @Bean
    public UserService userService(UserRepository userRepository) {
        return new UserService(userRepository);
    }
}
```

### Configuration Properties / خصائص التكوين

#### application.properties
```properties
# Database configuration
db.driver=com.mysql.cj.jdbc.Driver
db.url=jdbc:mysql://localhost:3306/mydb
db.username=root
db.password=password

# Application configuration
app.name=My Spring Application
app.version=1.0.0
server.port=8080
```

---

## JSP (JavaServer Pages)

### What is JSP? / ما هو JSP؟

**English:**
JSP (JavaServer Pages) is a technology used to create dynamic web pages by embedding Java code in HTML. JSP pages are compiled into servlets by the web container.

**Arabic:**
JSP (JavaServer Pages) هي تقنية تُستخدم لإنشاء صفحات ويب ديناميكية من خلال تضمين كود Java في HTML. يتم تجميع صفحات JSP إلى servlets بواسطة حاوي الويب.

### JSP Elements / عناصر JSP

#### 1. Scriptlets / البرامج النصية
```jsp
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
    <title>User List</title>
</head>
<body>
    <h1>Users</h1>
    <ul>
    <%
        List<User> users = (List<User>) request.getAttribute("users");
        if (users != null) {
            for (User user : users) {
    %>
                <li><%= user.getName() %> - <%= user.getEmail() %></li>
    <%
            }
        }
    %>
    </ul>
</body>
</html>
```

#### 2. Expressions / التعبيرات
```jsp
<%@ page import="java.util.Date" %>
<!DOCTYPE html>
<html>
<body>
    <h1>Welcome <%= request.getParameter("username") %>!</h1>
    <p>Current time: <%= new Date() %></p>
    <p>Your IP: <%= request.getRemoteAddr() %></p>
</body>
</html>
```

#### 3. Declarations / الإعلانات
```jsp
<%!
    private int counter = 0;
    
    public String formatDate(Date date) {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        return sdf.format(date);
    }
    
    public synchronized int getNextCounter() {
        return ++counter;
    }
%>

<!DOCTYPE html>
<html>
<body>
    <h1>Page Counter: <%= getNextCounter() %></h1>
    <p>Formatted Date: <%= formatDate(new Date()) %></p>
</body>
</html>
```

### JSP Directives / توجيهات JSP

#### 1. Page Directive / توجيه الصفحة
```jsp
<%@ page 
    language="java" 
    contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"
    import="java.util.*, com.example.model.*"
    session="true"
    errorPage="error.jsp"
%>
```

#### 2. Include Directive / توجيه التضمين
```jsp
<%@ include file="header.jsp" %>
<div class="content">
    <h1>Main Content</h1>
</div>
<%@ include file="footer.jsp" %>
```

#### 3. Taglib Directive / توجيه مكتبة العلامات
```jsp
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/fmt" prefix="fmt" %>

<!DOCTYPE html>
<html>
<body>
    <c:forEach var="user" items="${users}">
        <div class="user">
            <h3>${user.name}</h3>
            <p>Email: ${user.email}</p>
            <p>Joined: <fmt:formatDate value="${user.createdDate}" pattern="yyyy-MM-dd"/></p>
        </div>
    </c:forEach>
</body>
</html>
```

### JSTL (JavaServer Pages Standard Tag Library) / مكتبة العلامات القياسية

#### Core Tags / العلامات الأساسية
```jsp
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>

<!-- Variable assignment -->
<c:set var="username" value="John Doe"/>
<c:set var="age" value="25"/>

<!-- Conditional statements -->
<c:if test="${age >= 18}">
    <p>User is an adult</p>
</c:if>

<c:choose>
    <c:when test="${age < 13}">
        <p>Child</p>
    </c:when>
    <c:when test="${age < 18}">
        <p>Teenager</p>
    </c:when>
    <c:otherwise>
        <p>Adult</p>
    </c:otherwise>
</c:choose>

<!-- Loops -->
<c:forEach var="i" begin="1" end="5">
    <p>Number: ${i}</p>
</c:forEach>

<c:forEach var="user" items="${userList}" varStatus="status">
    <div class="user-${status.index}">
        <p>${status.count}. ${user.name}</p>
    </div>
</c:forEach>
```

### JSP Action Elements / عناصر إجراء JSP

```jsp
<!-- Forward action -->
<jsp:forward page="welcome.jsp">
    <jsp:param name="username" value="John"/>
</jsp:forward>

<!-- Include action -->
<jsp:include page="navigation.jsp"/>

<!-- UseBean action -->
<jsp:useBean id="user" class="com.example.model.User" scope="request"/>
<jsp:setProperty name="user" property="name" value="John Doe"/>
<jsp:getProperty name="user" property="name"/>
```

### Custom JSP Example / مثال JSP مخصص

```jsp
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/fmt" prefix="fmt" %>

<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>User Management System</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="container">
        <h1>User Management System</h1>
        
        <!-- Add new user form -->
        <div class="form-section">
            <h2>Add New User</h2>
            <form action="UserServlet" method="post">
                <input type="hidden" name="action" value="add">
                <div>
                    <label>Name:</label>
                    <input type="text" name="name" required>
                </div>
                <div>
                    <label>Email:</label>
                    <input type="email" name="email" required>
                </div>
                <button type="submit">Add User</button>
            </form>
        </div>
        
        <!-- Users list -->
        <div class="users-section">
            <h2>Users List</h2>
            <c:choose>
                <c:when test="${empty users}">
                    <p>No users found.</p>
                </c:when>
                <c:otherwise>
                    <table class="users-table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Name</th>
                                <th>Email</th>
                                <th>Created Date</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <c:forEach var="user" items="${users}">
                                <tr>
                                    <td>${user.id}</td>
                                    <td>${user.name}</td>
                                    <td>${user.email}</td>
                                    <td><fmt:formatDate value="${user.createdDate}" pattern="yyyy-MM-dd HH:mm"/></td>
                                    <td>
                                        <a href="UserServlet?action=edit&id=${user.id}">Edit</a>
                                        <a href="UserServlet?action=delete&id=${user.id}" 
                                           onclick="return confirm('Are you sure?')">Delete</a>
                                    </td>
                                </tr>
                            </c:forEach>
                        </tbody>
                    </table>
                </c:otherwise>
            </c:choose>
        </div>
        
        <!-- Error/Success messages -->
        <c:if test="${not empty message}">
            <div class="message ${messageType}">
                ${message}
            </div>
        </c:if>
    </div>
</body>
</html>
```

---

## Servlets

### What are Servlets? / ما هي Servlets؟

**English:**
Servlets are Java classes that handle HTTP requests and responses. They run on the server side and are used to create dynamic web applications. Servlets are managed by the web container (like Tomcat).

**Arabic:**
Servlets هي فئات Java تتعامل مع طلبات واستجابات HTTP. تعمل على جانب الخادم وتُستخدم لإنشاء تطبيقات ويب ديناميكية. يتم إدارة Servlets بواسطة حاوي الويب (مثل Tomcat).

### Servlet Lifecycle / دورة حياة Servlet

```java
public class UserServlet extends HttpServlet {
    
    private UserService userService;
    
    // 1. init() - Called once when servlet is first loaded
    @Override
    public void init() throws ServletException {
        super.init();
        userService = new UserService();
        System.out.println("UserServlet initialized");
    }
    
    // 2. service() - Called for each request (handles GET, POST, etc.)
    @Override
    protected void service(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        System.out.println("Processing request: " + request.getMethod());
        super.service(request, response);
    }
    
    // 3. destroy() - Called once when servlet is unloaded
    @Override
    public void destroy() {
        System.out.println("UserServlet destroyed");
        super.destroy();
    }
}
```

### HTTP Methods Handling / التعامل مع طرق HTTP

```java
@WebServlet(name = "UserServlet", urlPatterns = {"/users"})
public class UserServlet extends HttpServlet {
    
    private UserService userService = new UserService();
    
    // Handle GET requests
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        
        String action = request.getParameter("action");
        
        if ("list".equals(action) || action == null) {
            listUsers(request, response);
        } else if ("edit".equals(action)) {
            editUser(request, response);
        } else if ("delete".equals(action)) {
            deleteUser(request, response);
        }
    }
    
    // Handle POST requests
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        
        String action = request.getParameter("action");
        
        if ("add".equals(action)) {
            addUser(request, response);
        } else if ("update".equals(action)) {
            updateUser(request, response);
        }
    }
    
    private void listUsers(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        
        List<User> users = userService.getAllUsers();
        request.setAttribute("users", users);
        RequestDispatcher dispatcher = request.getRequestDispatcher("/WEB-INF/views/users.jsp");
        dispatcher.forward(request, response);
    }
    
    private void addUser(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        
        String name = request.getParameter("name");
        String email = request.getParameter("email");
        
        User user = new User(name, email);
        userService.createUser(user);
        
        request.setAttribute("message", "User added successfully!");
        request.setAttribute("messageType", "success");
        
        listUsers(request, response);
    }
    
    private void editUser(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        
        Long id = Long.parseLong(request.getParameter("id"));
        User user = userService.getUserById(id);
        
        request.setAttribute("user", user);
        RequestDispatcher dispatcher = request.getRequestDispatcher("/WEB-INF/views/editUser.jsp");
        dispatcher.forward(request, response);
    }
    
    private void updateUser(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        
        Long id = Long.parseLong(request.getParameter("id"));
        String name = request.getParameter("name");
        String email = request.getParameter("email");
        
        User user = userService.getUserById(id);
        user.setName(name);
        user.setEmail(email);
        
        userService.updateUser(user);
        
        request.setAttribute("message", "User updated successfully!");
        request.setAttribute("messageType", "success");
        
        listUsers(request, response);
    }
    
    private void deleteUser(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        
        Long id = Long.parseLong(request.getParameter("id"));
        userService.deleteUser(id);
        
        request.setAttribute("message", "User deleted successfully!");
        request.setAttribute("messageType", "success");
        
        listUsers(request, response);
    }
}
```

### Servlet Configuration / تكوين Servlet

#### 1. Using Annotations / استخدام التعليقات التوضيحية
```java
@WebServlet(
    name = "ProductServlet",
    urlPatterns = {"/products", "/product/*"},
    initParams = {
        @WebInitParam(name = "defaultCategory", value = "Electronics"),
        @WebInitParam(name = "pageSize", value = "10")
    }
)
public class ProductServlet extends HttpServlet {
    
    private String defaultCategory;
    private int pageSize;
    
    @Override
    public void init() throws ServletException {
        defaultCategory = getInitParameter("defaultCategory");
        pageSize = Integer.parseInt(getInitParameter("pageSize"));
    }
}
```

#### 2. Using web.xml / استخدام web.xml
```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee 
         http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

    <display-name>User Management System</display-name>
    
    <!-- Servlet Configuration -->
    <servlet>
        <servlet-name>UserServlet</servlet-name>
        <servlet-class>com.example.servlet.UserServlet</servlet-class>
        <init-param>
            <param-name>defaultPageSize</param-name>
            <param-value>20</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    
    <servlet-mapping>
        <servlet-name>UserServlet</servlet-name>
        <url-pattern>/users</url-pattern>
    </servlet-mapping>
    
    <!-- Welcome files -->
    <welcome-file-list>
        <welcome-file>index.html</welcome-file>
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>
    
    <!-- Error pages -->
    <error-page>
        <error-code>404</error-code>
        <location>/WEB-INF/views/error/404.jsp</location>
    </error-page>
    
    <error-page>
        <error-code>500</error-code>
        <location>/WEB-INF/views/error/500.jsp</location>
    </error-page>
</web-app>
```

### Filters / المرشحات

```java
@WebFilter(filterName = "AuthenticationFilter", urlPatterns = {"/admin/*"})
public class AuthenticationFilter implements Filter {
    
    @Override
    public void init(FilterConfig filterConfig) throws ServletException {
        System.out.println("AuthenticationFilter initialized");
    }
    
    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) 
            throws IOException, ServletException {
        
        HttpServletRequest httpRequest = (HttpServletRequest) request;
        HttpServletResponse httpResponse = (HttpServletResponse) response;
        
        HttpSession session = httpRequest.getSession(false);
        boolean isAuthenticated = (session != null && session.getAttribute("user") != null);
        
        if (isAuthenticated) {
            // User is authenticated, continue with the request
            chain.doFilter(request, response);
        } else {
            // User is not authenticated, redirect to login
            httpResponse.sendRedirect(httpRequest.getContextPath() + "/login.jsp");
        }
    }
    
    @Override
    public void destroy() {
        System.out.println("AuthenticationFilter destroyed");
    }
}
```

### Session Management / إدارة الجلسة

```java
@WebServlet("/login")
public class LoginServlet extends HttpServlet {
    
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        
        String username = request.getParameter("username");
        String password = request.getParameter("password");
        
        // Validate credentials
        if (validateUser(username, password)) {
            // Create session
            HttpSession session = request.getSession(true);
            session.setAttribute("user", username);
            session.setMaxInactiveInterval(30 * 60); // 30 minutes
            
            // Store user info in session
            User user = getUserByUsername(username);
            session.setAttribute("userInfo", user);
            
            response.sendRedirect("dashboard.jsp");
        } else {
            request.setAttribute("error", "Invalid username or password");
            RequestDispatcher dispatcher = request.getRequestDispatcher("login.jsp");
            dispatcher.forward(request, response);
        }
    }
    
    private boolean validateUser(String username, String password) {
        // Implement authentication logic
        return "admin".equals(username) && "password".equals(password);
    }
    
    private User getUserByUsername(String username) {
        // Retrieve user from database
        return new User(username, username + "@example.com");
    }
}

@WebServlet("/logout")
public class LogoutServlet extends HttpServlet {
    
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        
        HttpSession session = request.getSession(false);
        if (session != null) {
            session.invalidate();
        }
        
        response.sendRedirect("login.jsp");
    }
}
```

---

## JEE/J2EE

### What is JEE/J2EE? / ما هو JEE/J2EE؟

**English:**
Java EE (Enterprise Edition), formerly known as J2EE, is a platform for developing enterprise-scale applications. It provides APIs and runtime environment for developing and running large-scale, multi-tiered, scalable, and secure network applications.

**Arabic:**
Java EE (Enterprise Edition)، والمعروف سابقاً باسم J2EE، هو منصة لتطوير التطبيقات على نطاق المؤسسة. يوفر واجهات برمجة التطبيقات وبيئة وقت التشغيل لتطوير وتشغيل تطبيقات الشبكة واسعة النطاق ومتعددة الطبقات وقابلة للتوسع والآمنة.

### JEE Architecture / معمارية JEE

```
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   Client Tier   │    │  Middle Tier    │    │   EIS Tier      │
│                 │    │                 │    │                 │
│ • Web Browser   │◄──►│ • Web Container │◄──►│ • Database      │
│ • Mobile App    │    │ • EJB Container │    │ • Legacy System │
│ • Desktop App   │    │ • App Server    │    │ • ERP System    │
└─────────────────┘    └─────────────────┘    └─────────────────┘
```

### JEE Components / مكونات JEE

#### 1. Web Components / مكونات الويب
- **Servlets**: Handle HTTP requests / تتعامل مع طلبات HTTP
- **JSP**: Create dynamic web pages / إنشاء صفحات ويب ديناميكية
- **JSF**: Component-based web framework / إطار عمل ويب قائم على المكونات

#### 2. Business Components / مكونات الأعمال
- **EJB (Enterprise JavaBeans)**: Business logic components / مكونات منطق الأعمال

#### 3. Enterprise Information System Tier / طبقة نظام معلومات المؤسسة
- **JPA**: Database persistence / استمرارية قاعدة البيانات
- **JTA**: Transaction management / إدارة المعاملات
- **JMS**: Messaging / الرسائل

### Enterprise JavaBeans (EJB)

```java
// Session Bean - Stateless
@Stateless
public class UserServiceBean implements UserServiceLocal {
    
    @PersistenceContext
    private EntityManager entityManager;
    
    public void createUser(User user) {
        entityManager.persist(user);
    }
    
    public User findUserById(Long id) {
        return entityManager.find(User.class, id);
    }
    
    public List<User> getAllUsers() {
        return entityManager.createQuery("SELECT u FROM User u", User.class)
                           .getResultList();
    }
}

// Local Business Interface
@Local
public interface UserServiceLocal {
    void createUser(User user);
    User findUserById(Long id);
    List<User> getAllUsers();
}
```

```java
// Session Bean - Stateful
@Stateful
public class ShoppingCartBean implements ShoppingCartLocal {
    
    private List<CartItem> items = new ArrayList<>();
    
    public void addItem(Product product, int quantity) {
        CartItem item = new CartItem(product, quantity);
        items.add(item);
    }
    
    public void removeItem(Long productId) {
        items.removeIf(item -> item.getProduct().getId().equals(productId));
    }
    
    public List<CartItem> getItems() {
        return new ArrayList<>(items);
    }
    
    public BigDecimal getTotalAmount() {
        return items.stream()
                   .map(item -> item.getProduct().getPrice().multiply(
                       BigDecimal.valueOf(item.getQuantity())))
                   .reduce(BigDecimal.ZERO, BigDecimal::add);
    }
    
    @Remove
    public void checkout() {
        // Process checkout
        items.clear();
    }
}
```

### JPA (Java Persistence API)

```java
// Entity
@Entity
@Table(name = "products")
@NamedQueries({
    @NamedQuery(name = "Product.findAll", query = "SELECT p FROM Product p"),
    @NamedQuery(name = "Product.findByCategory", 
                query = "SELECT p FROM Product p WHERE p.category = :category")
})
public class Product {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @Column(nullable = false)
    private String name;
    
    @Column(precision = 10, scale = 2)
    private BigDecimal price;
    
    @Enumerated(EnumType.STRING)
    private Category category;
    
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "created_date")
    private Date createdDate;
    
    // Constructors, getters, setters
}

// Repository using JPA
@Stateless
public class ProductRepository {
    
    @PersistenceContext
    private EntityManager entityManager;
    
    public void save(Product product) {
        if (product.getId() == null) {
            entityManager.persist(product);
        } else {
            entityManager.merge(product);
        }
    }
    
    public Product findById(Long id) {
        return entityManager.find(Product.class, id);
    }
    
    public List<Product> findAll() {
        return entityManager.createNamedQuery("Product.findAll", Product.class)
                           .getResultList();
    }
    
    public List<Product> findByCategory(Category category) {
        return entityManager.createNamedQuery("Product.findByCategory", Product.class)
                           .setParameter("category", category)
                           .getResultList();
    }
    
    public void delete(Long id) {
        Product product = findById(id);
        if (product != null) {
            entityManager.remove(product);
        }
    }
}
```

### JMS (Java Message Service)

```java
// Message Producer
@Stateless
public class OrderNotificationService {
    
    @Resource(mappedName = "java:/ConnectionFactory")
    private ConnectionFactory connectionFactory;
    
    @Resource(mappedName = "java:/queue/orderQueue")
    private Queue orderQueue;
    
    public void sendOrderNotification(Order order) {
        try (Connection connection = connectionFactory.createConnection();
             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
             MessageProducer producer = session.createProducer(orderQueue)) {
            
            ObjectMessage message = session.createObjectMessage(order);
            producer.send(message);
            
        } catch (JMSException e) {
            throw new RuntimeException("Failed to send order notification", e);
        }
    }
}

// Message Driven Bean (Consumer)
@MessageDriven(activationConfig = {
    @ActivationConfigProperty(propertyName = "destinationType", propertyValue = "javax.jms.Queue"),
    @ActivationConfigProperty(propertyName = "destination", propertyValue = "orderQueue")
})
public class OrderProcessingBean implements MessageListener {
    
    @EJB
    private EmailService emailService;
    
    @Override
    public void onMessage(Message message) {
        try {
            if (message instanceof ObjectMessage) {
                ObjectMessage objMessage = (ObjectMessage) message;
                Order order = (Order) objMessage.getObject();
                
                // Process the order
                processOrder(order);
                
                // Send confirmation email
                emailService.sendOrderConfirmation(order);
                
            }
        } catch (JMSException e) {
            throw new RuntimeException("Failed to process order message", e);
        }
    }
    
    private void processOrder(Order order) {
        // Order processing logic
        System.out.println("Processing order: " + order.getId());
    }
}
```

---

## MVC Pattern

### What is MVC? / ما هو MVC؟

**English:**
MVC (Model-View-Controller) is a software architectural pattern that separates an application into three interconnected components. This separation helps manage complexity and promotes code reusability.

**Arabic:**
MVC (Model-View-Controller) هو نمط معماري للبرمجيات يفصل التطبيق إلى ثلاثة مكونات مترابطة. هذا الفصل يساعد في إدارة التعقيد ويشجع على إعادة استخدام الكود.

### MVC Components / مكونات MVC

```
┌─────────────┐    HTTP Request    ┌──────────────┐
│   Browser   │◄─────────────────►│ Controller   │
└─────────────┘                    └──────┬───────┘
       ▲                                  │
       │                                  ▼
       │ HTTP Response           ┌─────────────────┐
       │                         │     Model       │
       │                         │   (Business     │
       │                         │    Logic &      │
       │                         │     Data)       │
       │                         └─────────┬───────┘
       │                                   │
       │                                   ▼
       └─────────────────────────┌─────────────────┐
                                 │      View       │
                                 │ (Presentation   │
                                 │    Layer)       │
                                 └─────────────────┘
```

### Traditional MVC without Framework / MVC التقليدي بدون إطار عمل

#### Model / النموذج
```java
// User Model
public class User {
    private Long id;
    private String name;
    private String email;
    private Date createdDate;
    
    // Constructors
    public User() {}
    
    public User(String name, String email) {
        this.name = name;
        this.email = email;
        this.createdDate = new Date();
    }
    
    // Getters and setters
    // ... (omitted for brevity)
}

// UserService - Business Logic
public class UserService {
    private UserDAO userDAO;
    
    public UserService() {
        this.userDAO = new UserDAOImpl();
    }
    
    public boolean createUser(String name, String email) {
        // Validation
        if (name == null || name.trim().isEmpty()) {
            throw new IllegalArgumentException("Name cannot be empty");
        }
        
        if (email == null || !isValidEmail(email)) {
            throw new IllegalArgumentException("Invalid email format");
        }
        
        // Check if user already exists
        if (userDAO.findByEmail(email) != null) {
            throw new IllegalArgumentException("User with this email already exists");
        }
        
        // Create user
        User user = new User(name, email);
        return userDAO.save(user);
    }
    
    public List<User> getAllUsers() {
        return userDAO.findAll();
    }
    
    public User getUserById(Long id) {
        return userDAO.findById(id);
    }
    
    public boolean updateUser(Long id, String name, String email) {
        User user = userDAO.findById(id);
        if (user == null) {
            return false;
        }
        
        user.setName(name);
        user.setEmail(email);
        return userDAO.update(user);
    }
    
    public boolean deleteUser(Long id) {
        return userDAO.delete(id);
    }
    
    private boolean isValidEmail(String email) {
        return email.contains("@") && email.contains(".");
    }
}
```

#### Controller / المتحكم
```java
@WebServlet("/user")
public class UserController extends HttpServlet {
    
    private UserService userService;
    
    @Override
    public void init() throws ServletException {
        userService = new UserService();
    }
    
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        
        String action = request.getParameter("action");
        
        try {
            switch (action == null ? "list" : action) {
                case "list":
                    listUsers(request, response);
                    break;
                case "show":
                    showUser(request, response);
                    break;
                case "new":
                    showNewUserForm(request, response);
                    break;
                case "edit":
                    showEditUserForm(request, response);
                    break;
                case "delete":
                    deleteUser(request, response);
                    break;
                default:
                    listUsers(request, response);
            }
        } catch (Exception e) {
            request.setAttribute("error", e.getMessage());
            request.getRequestDispatcher("/WEB-INF/views/error.jsp").forward(request, response);
        }
    }
    
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        
        String action = request.getParameter("action");
        
        try {
            switch (action) {
                case "create":
                    createUser(request, response);
                    break;
                case "update":
                    updateUser(request, response);
                    break;
                default:
                    listUsers(request, response);
            }
        } catch (Exception e) {
            request.setAttribute("error", e.getMessage());
            request.getRequestDispatcher("/WEB-INF/views/error.jsp").forward(request, response);
        }
    }
    
    private void listUsers(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        List<User> users = userService.getAllUsers();
        request.setAttribute("users", users);
        request.getRequestDispatcher("/WEB-INF/views/user-list.jsp").forward(request, response);
    }
    
    private void showUser(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        Long id = Long.parseLong(request.getParameter("id"));
        User user = userService.getUserById(id);
        
        if (user != null) {
            request.setAttribute("user", user);
            request.getRequestDispatcher("/WEB-INF/views/user-detail.jsp").forward(request, response);
        } else {
            response.sendError(HttpServletResponse.SC_NOT_FOUND, "User not found");
        }
    }
    
    private void showNewUserForm(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        request.getRequestDispatcher("/WEB-INF/views/user-form.jsp").forward(request, response);
    }
    
    private void showEditUserForm(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        Long id = Long.parseLong(request.getParameter("id"));
        User user = userService.getUserById(id);
        
        if (user != null) {
            request.setAttribute("user", user);
            request.getRequestDispatcher("/WEB-INF/views/user-form.jsp").forward(request, response);
        } else {
            response.sendError(HttpServletResponse.SC_NOT_FOUND, "User not found");
        }
    }
    
    private void createUser(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        String name = request.getParameter("name");
        String email = request.getParameter("email");
        
        userService.createUser(name, email);
        
        request.setAttribute("message", "User created successfully!");
        response.sendRedirect(request.getContextPath() + "/user?action=list");
    }
    
    private void updateUser(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        Long id = Long.parseLong(request.getParameter("id"));
        String name = request.getParameter("name");
        String email = request.getParameter("email");
        
        userService.updateUser(id, name, email);
        
        request.setAttribute("message", "User updated successfully!");
        response.sendRedirect(request.getContextPath() + "/user?action=list");
    }
    
    private void deleteUser(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        Long id = Long.parseLong(request.getParameter("id"));
        userService.deleteUser(id);
        
        request.setAttribute("message", "User deleted successfully!");
        response.sendRedirect(request.getContextPath() + "/user?action=list");
    }
}
```

#### View / العرض

**user-list.jsp**
```jsp
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/fmt" prefix="fmt" %>

<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>User List</title>
    <link rel="stylesheet" type="text/css" href="${pageContext.request.contextPath}/css/style.css">
</head>
<body>
    <div class="container">
        <h1>User Management System</h1>
        
        <div class="actions">
            <a href="${pageContext.request.contextPath}/user?action=new" class="btn btn-primary">
                Add New User
            </a>
        </div>
        
        <c:if test="${not empty message}">
            <div class="alert alert-success">
                ${message}
            </div>
        </c:if>
        
        <c:choose>
            <c:when test="${empty users}">
                <div class="no-data">
                    <p>No users found.</p>
                    <a href="${pageContext.request.contextPath}/user?action=new">Create the first user</a>
                </div>
            </c:when>
            <c:otherwise>
                <table class="table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Name</th>
                            <th>Email</th>
                            <th>Created Date</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <c:forEach var="user" items="${users}">
                            <tr>
                                <td>${user.id}</td>
                                <td>${user.name}</td>
                                <td>${user.email}</td>
                                <td><fmt:formatDate value="${user.createdDate}" pattern="yyyy-MM-dd HH:mm"/></td>
                                <td>
                                    <a href="${pageContext.request.contextPath}/user?action=show&id=${user.id}" 
                                       class="btn btn-sm btn-info">View</a>
                                    <a href="${pageContext.request.contextPath}/user?action=edit&id=${user.id}" 
                                       class="btn btn-sm btn-warning">Edit</a>
                                    <a href="${pageContext.request.contextPath}/user?action=delete&id=${user.id}" 
                                       class="btn btn-sm btn-danger"
                                       onclick="return confirm('Are you sure you want to delete this user?')">Delete</a>
                                </td>
                            </tr>
                        </c:forEach>
                    </tbody>
                </table>
            </c:otherwise>
        </c:choose>
    </div>
</body>
</html>
```

**user-form.jsp**
```jsp
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>

<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>${empty user ? 'Add' : 'Edit'} User</title>
    <link rel="stylesheet" type="text/css" href="${pageContext.request.contextPath}/css/style.css">
</head>
<body>
    <div class="container">
        <h1>${empty user ? 'Add New' : 'Edit'} User</h1>
        
        <c:if test="${not empty error}">
            <div class="alert alert-error">
                ${error}
            </div>
        </c:if>
        
        <form action="${pageContext.request.contextPath}/user" method="post" class="form">
            <input type="hidden" name="action" value="${empty user ? 'create' : 'update'}">
            <c:if test="${not empty user}">
                <input type="hidden" name="id" value="${user.id}">
            </c:if>
            
            <div class="form-group">
                <label for="name">Name:</label>
                <input type="text" id="name" name="name" value="${user.name}" required>
            </div>
            
            <div class="form-group">
                <label for="email">Email:</label>
                <input type="email" id="email" name="email" value="${user.email}" required>
            </div>
            
            <div class="form-actions">
                <button type="submit" class="btn btn-primary">
                    ${empty user ? 'Create' : 'Update'} User
                </button>
                <a href="${pageContext.request.contextPath}/user?action=list" class="btn btn-secondary">
                    Cancel
                </a>
            </div>
        </form>
    </div>
</body>
</html>
```

---

## MVC with Spring

### Spring MVC Architecture / معمارية Spring MVC

```
┌─────────────┐    HTTP Request    ┌──────────────────┐
│   Browser   │──────────────────►│ DispatcherServlet│
└─────────────┘                    └─────────┬────────┘
       ▲                                     │
       │                                     ▼
       │ HTTP Response              ┌─────────────────┐
       │                            │ HandlerMapping  │
       │                            └─────────┬───────┘
       │                                      │
       │                                      ▼
       │                            ┌─────────────────┐
       │                            │   Controller    │◄──┐
       │                            └─────────┬───────┘   │
       │                                      │           │
       │                                      ▼           │
       │                            ┌─────────────────┐   │
       │                            │     Model       │   │
       │                            └─────────┬───────┘   │
       │                                      │           │
       │                                      ▼           │
       │                            ┌─────────────────┐   │
       │◄───────────────────────────│  ViewResolver   │   │
                                    └─────────┬───────┘   │
                                              │           │
                                              ▼           │
                                    ┌─────────────────┐   │
                                    │      View       │───┘
                                    └─────────────────┘
```

### Spring MVC Configuration / تكوين Spring MVC

#### Web Configuration / تكوين الويب
```java
public class WebAppInitializer implements WebApplicationInitializer {
    
    @Override
    public void onStartup(ServletContext servletContext) throws ServletException {
        
        // Create the root Spring application context
        AnnotationConfigWebApplicationContext rootContext = new AnnotationConfigWebApplicationContext();
        rootContext.register(RootConfig.class);
        
        // Create the dispatcher servlet's Spring application context
        AnnotationConfigWebApplicationContext dispatcherContext = new AnnotationConfigWebApplicationContext();
        dispatcherContext.register(WebConfig.class);
        
        // Register and map the dispatcher servlet
        ServletRegistration.Dynamic dispatcher = servletContext.addServlet("dispatcher", 
            new DispatcherServlet(dispatcherContext));
        dispatcher.setLoadOnStartup(1);
        dispatcher.addMapping("/");
        
        // Register the context loader listener
        servletContext.addListener(new ContextLoaderListener(rootContext));
    }
}

@Configuration
@ComponentScan(basePackages = {"com.example.service", "com.example.repository"})
public class RootConfig {
    
    @Bean
    public DataSource dataSource() {
        DriverManagerDataSource dataSource = new DriverManagerDataSource();
        dataSource.setDriverClassName("com.mysql.cj.jdbc.Driver");
        dataSource.setUrl("jdbc:mysql://localhost:3306/mydb");
        dataSource.setUsername("root");
        dataSource.setPassword("password");
        return dataSource;
    }
    
    @Bean
    public JdbcTemplate jdbcTemplate(DataSource dataSource) {
        return new JdbcTemplate(dataSource);
    }
}

@Configuration
@EnableWebMvc
@ComponentScan(basePackages = "com.example.controller")
public class WebConfig implements WebMvcConfigurer {
    
    @Bean
    public ViewResolver viewResolver() {
        InternalResourceViewResolver resolver = new InternalResourceViewResolver();
        resolver.setPrefix("/WEB-INF/views/");
        resolver.setSuffix(".jsp");
        resolver.setExposeContextBeansAsAttributes(true);
        return resolver;
    }
    
    @Override
    public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {
        configurer.enable();
    }
    
    @Override
    public void addResourceHandlers(ResourceHandlerRegistry registry) {
        registry.addResourceHandler("/css/**").addResourceLocations("/css/");
        registry.addResourceHandler("/js/**").addResourceLocations("/js/");
        registry.addResourceHandler("/images/**").addResourceLocations("/images/");
    }
}
```

### Spring MVC Controller / متحكم Spring MVC

```java
@Controller
@RequestMapping("/users")
public class UserController {
    
    @Autowired
    private UserService userService;
    
    // List all users
    @GetMapping
    public String listUsers(Model model) {
        List<User> users = userService.getAllUsers();
        model.addAttribute("users", users);
        return "users/list";
    }
    
    // Show user details
    @GetMapping("/{id}")
    public String showUser(@PathVariable Long id, Model model) {
        User user = userService.getUserById(id);
        if (user == null) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "User not found");
        }
        model.addAttribute("user", user);
        return "users/detail";
    }
    
    // Show new user form
    @GetMapping("/new")
    public String newUserForm(Model model) {
        model.addAttribute("user", new User());
        return "users/form";
    }
    
    // Create new user
    @PostMapping
    public String createUser(@Valid @ModelAttribute User user, 
                           BindingResult result, 
                           RedirectAttributes redirectAttributes) {
        
        if (result.hasErrors()) {
            return "users/form";
        }
        
        try {
            userService.createUser(user);
            redirectAttributes.addFlashAttribute("message", "User created successfully!");
            return "redirect:/users";
        } catch (Exception e) {
            result.rejectValue("email", "error.user", e.getMessage());
            return "users/form";
        }
    }
    
    // Show edit user form
    @GetMapping("/{id}/edit")
    public String editUserForm(@PathVariable Long id, Model model) {
        User user = userService.getUserById(id);
        if (user == null) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "User not found");
        }
        model.addAttribute("user", user);
        return "users/form";
    }
    
    // Update user
    @PutMapping("/{id}")
    public String updateUser(@PathVariable Long id, 
                           @Valid @ModelAttribute User user, 
                           BindingResult result, 
                           RedirectAttributes redirectAttributes) {
        
        if (result.hasErrors()) {
            return "users/form";
        }
        
        try {
            user.setId(id);
            userService.updateUser(user);
            redirectAttributes.addFlashAttribute("message", "User updated successfully!");
            return "redirect:/users";
        } catch (Exception e) {
            result.rejectValue("email", "error.user", e.getMessage());
            return "users/form";
        }
    }
    
    // Delete user
    @DeleteMapping("/{id}")
    public String deleteUser(@PathVariable Long id, RedirectAttributes redirectAttributes) {
        userService.deleteUser(id);
        redirectAttributes.addFlashAttribute("message", "User deleted successfully!");
        return "redirect:/users";
    }
    
    // Handle form submission with different HTTP methods
    @PostMapping("/{id}")
    public String handleUserUpdate(@PathVariable Long id, 
                                 @RequestParam("_method") String method, 
                                 @Valid @ModelAttribute User user, 
                                 BindingResult result, 
                                 RedirectAttributes redirectAttributes) {
        
        if ("PUT".equals(method)) {
            return updateUser(id, user, result, redirectAttributes);
        } else if ("DELETE".equals(method)) {
            return deleteUser(id, redirectAttributes);
        }
        
        return "redirect:/users";
    }
}
```

### Model and Validation / النموذج والتحقق

```java
@Entity
@Table(name = "users")
public class User {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @NotBlank(message = "Name is required")
    @Size(min = 2, max = 100, message = "Name must be between 2 and 100 characters")
    @Column(nullable = false, length = 100)
    private String name;
    
    @NotBlank(message = "Email is required")
    @Email(message = "Please provide a valid email address")
    @Column(nullable = false, unique = true)
    private String email;
    
    @Pattern(regexp = "^\\+?[1-9]\\d{1,14}$", message = "Please provide a valid phone number")
    private String phone;
    
    @Min(value = 18, message = "Age must be at least 18")
    @Max(value = 120, message = "Age must be less than 120")
    private Integer age;
    
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "created_date")
    private Date createdDate;
    
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "updated_date")
    private Date updatedDate;
    
    // Constructors
    public User() {
        this.createdDate = new Date();
        this.updatedDate = new Date();
    }
    
    public User(String name, String email) {
        this();
        this.name = name;
        this.email = email;
    }
    
    // Getters and setters...
    
    @PreUpdate
    public void preUpdate() {
        this.updatedDate = new Date();
    }
}
```

### Spring MVC REST Controller / متحكم REST في Spring MVC

```java
@RestController
@RequestMapping("/api/users")
@CrossOrigin(origins = "*")
public class UserRestController {
    
    @Autowired
    private UserService userService;
    
    // Get all users
    @GetMapping
    public ResponseEntity<List<User>> getAllUsers() {
        List<User> users = userService.getAllUsers();
        return ResponseEntity.ok(users);
    }
    
    // Get user by ID
    @GetMapping("/{id}")
    public ResponseEntity<User> getUserById(@PathVariable Long id) {
        User user = userService.getUserById(id);
        if (user != null) {
            return ResponseEntity.ok(user);
        } else {
            return ResponseEntity.notFound().build();
        }
    }
    
    // Create new user
    @PostMapping
    public ResponseEntity<User> createUser(@Valid @RequestBody User user, BindingResult result) {
        if (result.hasErrors()) {
            return ResponseEntity.badRequest().build();
        }
        
        try {
            User createdUser = userService.createUser(user);
            return ResponseEntity.status(HttpStatus.CREATED).body(createdUser);
        } catch (Exception e) {
            return ResponseEntity.badRequest().build();
        }
    }
    
    // Update user
    @PutMapping("/{id}")
    public ResponseEntity<User> updateUser(@PathVariable Long id, 
                                         @Valid @RequestBody User user, 
                                         BindingResult result) {
        if (result.hasErrors()) {
            return ResponseEntity.badRequest().build();
        }
        
        try {
            user.setId(id);
            User updatedUser = userService.updateUser(user);
            return ResponseEntity.ok(updatedUser);
        } catch (Exception e) {
            return ResponseEntity.notFound().build();
        }
    }
    
    // Delete user
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteUser(@PathVariable Long id) {
        try {
            userService.deleteUser(id);
            return ResponseEntity.noContent().build();
        } catch (Exception e) {
            return ResponseEntity.notFound().build();
        }
    }
    
    // Search users
    @GetMapping("/search")
    public ResponseEntity<List<User>> searchUsers(@RequestParam String query) {
        List<User> users = userService.searchUsers(query);
        return ResponseEntity.ok(users);
    }
}
```

### Exception Handling / معالجة الاستثناءات

```java
@ControllerAdvice
public class GlobalExceptionHandler {
    
    @ExceptionHandler(ResponseStatusException.class)
    public String handleResponseStatusException(ResponseStatusException ex, Model model) {
        model.addAttribute("error", ex.getReason());
        model.addAttribute("status", ex.getStatus().value());
        return "error/error";
    }
    
    @ExceptionHandler(MethodArgumentNotValidException.class)
    public ResponseEntity<Map<String, String>> handleValidationExceptions(
            MethodArgumentNotValidException ex) {
        
        Map<String, String> errors = new HashMap<>();
        ex.getBindingResult().getAllErrors().forEach((error) -> {
            String fieldName = ((FieldError) error).getField();
            String errorMessage = error.getDefaultMessage();
            errors.put(fieldName, errorMessage);
        });
        
        return ResponseEntity.badRequest().body(errors);
    }
    
    @ExceptionHandler(Exception.class)
    public String handleGenericException(Exception ex, Model model) {
        model.addAttribute("error", "An unexpected error occurred: " + ex.getMessage());
        return "error/error";
    }
}
```

---

## Interview Questions & Answers

### Maven Questions / أسئلة Maven

**Q1: What is Maven and what are its main benefits?**
**س1: ما هو Maven وما هي فوائده الرئيسية؟**

**Answer/الإجابة:**
Maven is a build automation and project management tool for Java projects. Its main benefits include:
- **Dependency Management**: Automatically downloads and manages project dependencies
- **Standard Directory Layout**: Provides a standard project structure
- **Build Lifecycle**: Defines a clear build process with predefined phases
- **Integration**: Easy integration with IDEs and other tools
- **Repository System**: Central and local repositories for artifact management

**Q2: Explain Maven's build lifecycle phases.**
**س2: اشرح مراحل دورة حياة البناء في Maven.**

**Answer/الإجابة:**
Maven has three built-in build lifecycles:
1. **Default Lifecycle**: Handles project deployment
   - validate → compile → test → package → verify → install → deploy
2. **Clean Lifecycle**: Cleans up artifacts created by prior builds
   - pre-clean → clean → post-clean
3. **Site Lifecycle**: Creates project documentation
   - pre-site → site → post-site → site-deploy

**Q3: What is the difference between dependency scope 'compile', 'provided', and 'test'?**
**س3: ما الفرق بين نطاقات التبعية 'compile' و 'provided' و 'test'؟**

**Answer/الإجابة:**
- **compile** (default): Available in all classpaths, included in final package
- **provided**: Available during compile and test, but not included in final package (e.g., servlet-api)
- **test**: Only available during test compilation and execution
- **runtime**: Not needed for compilation but required for execution
- **system**: Similar to provided but you must explicitly provide the JAR location

### JDBC Questions / أسئلة JDBC

**Q4: What is JDBC and explain its architecture?**
**س4: ما هو JDBC واشرح معماريته؟**

**Answer/الإجابة:**
JDBC (Java Database Connectivity) is a Java API for connecting and executing queries with databases. Its architecture consists of:
1. **JDBC API**: Interface for application developers
2. **JDBC Driver Manager**: Manages database drivers
3. **JDBC Drivers**: Bridge between Java application and database
4. **Database**: The actual data storage system

**Q5: What are the different types of JDBC drivers?**
**س5: ما هي الأنواع المختلفة لبرامج تشغيل JDBC؟**

**Answer/الإجابة:**
1. **Type 1 (JDBC-ODBC Bridge)**: Uses ODBC driver to connect
2. **Type 2 (Native-API Driver)**: Uses native database API
3. **Type 3 (Network Protocol Driver)**: Uses middleware server
4. **Type 4 (Thin Driver)**: Pure Java driver, connects directly to database

**Q6: What is the difference between Statement, PreparedStatement, and CallableStatement?**
**س6: ما الفرق بين Statement و PreparedStatement و CallableStatement؟**

**Answer/الإجابة:**
- **Statement**: Used for static SQL queries, compiled every time, vulnerable to SQL injection
- **PreparedStatement**: Precompiled SQL, supports parameters, prevents SQL injection, better performance for repeated queries
- **CallableStatement**: Used to call stored procedures, extends PreparedStatement

### Hibernate Questions / أسئلة Hibernate

**Q7: What is Hibernate and what problems does it solve?**
**س7: ما هو Hibernate وما المشاكل التي يحلها؟**

**Answer/الإجابة:**
Hibernate is an ORM framework that maps Java objects to database tables. It solves:
- **Object-Relational Impedance Mismatch**: Bridges the gap between object-oriented and relational paradigms
- **Boilerplate Code**: Eliminates repetitive JDBC code
- **Database Independence**: Provides database abstraction through dialects
- **Automatic SQL Generation**: Generates SQL queries automatically
- **Caching**: Provides first and second level caching

**Q8: Explain Hibernate's session and its lifecycle.**
**س8: اشرح جلسة Hibernate ودورة حياتها.**

**Answer/الإجابة:**
Session is the primary interface for database operations in Hibernate. Entity lifecycle states:
1. **Transient**: Not associated with any session
2. **Persistent**: Associated with a session and has database representation
3. **Detached**: Was persistent but session is closed
4. **Removed**: Marked for deletion

**Q9: What is the difference between get() and load() methods?**
**س9: ما الفرق بين طريقتي get() و load()؟**

**Answer/الإجابة:**
- **get()**: Returns null if object not found, hits database immediately, returns actual object
- **load()**: Throws ObjectNotFoundException if not found, returns proxy object, implements lazy loading

**Q10: Explain different types of Hibernate mappings.**
**س10: اشرح الأنواع المختلفة لربط Hibernate.**

**Answer/الإجابة:**
1. **One-to-One**: @OneToOne - User ↔ UserProfile
2. **One-to-Many**: @OneToMany - Department → Employees
3. **Many-to-One**: @ManyToOne - Employee → Department
4. **Many-to-Many**: @ManyToMany - Student ↔ Course

### Spring Framework Questions / أسئلة Spring Framework

**Q11: What is Spring Framework and what are its key features?**
**س11: ما هو Spring Framework وما هي ميزاته الأساسية؟**

**Answer/الإجابة:**
Spring is a comprehensive framework for enterprise Java development. Key features:
- **IoC (Inversion of Control)**: Container manages object creation and dependencies
- **AOP (Aspect-Oriented Programming)**: Cross-cutting concerns like logging, security
- **Transaction Management**: Declarative transaction support
- **MVC Framework**: Web application development
- **Integration**: Easy integration with other frameworks

**Q12: Explain Dependency Injection and its types.**
**س12: اشرح حقن التبعية وأنواعها.**

**Answer/الإجابة:**
Dependency Injection is a design pattern where dependencies are provided to an object rather than creating them internally. Types:
1. **Constructor Injection**: Dependencies provided through constructor (recommended)
2. **Setter Injection**: Dependencies provided through setter methods
3. **Field Injection**: Dependencies injected directly into fields using @Autowired

**Q13: What are Spring Bean scopes?**
**س13: ما هي نطاقات Spring Bean؟**

**Answer/الإجابة:**
1. **Singleton** (default): One instance per Spring container
2. **Prototype**: New instance every time requested
3. **Request**: One instance per HTTP request (web apps)
4. **Session**: One instance per HTTP session (web apps)
5. **Global Session**: One instance per global HTTP session (portlet apps)

**Q14: What is the difference between @Component, @Service, @Repository, and @Controller?**
**س14: ما الفرق بين @Component و @Service و @Repository و @Controller؟**

**Answer/الإجابة:**
- **@Component**: Generic stereotype annotation for any Spring-managed component
- **@Service**: Specialization of @Component, indicates service layer
- **@Repository**: Specialization of @Component, indicates data access layer, provides exception translation
- **@Controller**: Specialization of @Component, indicates presentation layer (MVC controller)

### Spring MVC Questions / أسئلة Spring MVC

**Q15: Explain Spring MVC architecture and request flow.**
**س15: اشرح معمارية Spring MVC وتدفق الطلبات.**

**Answer/الإجابة:**
Spring MVC follows Front Controller pattern:
1. **DispatcherServlet** receives all requests
2. **HandlerMapping** determines which controller to call
3. **Controller** processes request and returns ModelAndView
4. **ViewResolver** resolves logical view name to actual view
5. **View** renders the model data and sends response

**Q16: What is the difference between @RequestParam and @PathVariable?**
**س16: ما الفرق بين @RequestParam و @PathVariable؟**

**Answer/الإجابة:**
- **@RequestParam**: Extracts query parameters from URL (?name=value)
- **@PathVariable**: Extracts values from URI path (/users/{id})

Example:
```java
@GetMapping("/users/{id}")
public String getUser(@PathVariable Long id, @RequestParam String name)
// URL: /users/123?name=John
```

### JSP and Servlets Questions / أسئلة JSP و Servlets

**Q17: What is the servlet lifecycle?**
**س17: ما هي دورة حياة servlet؟**

**Answer/الإجابة:**
1. **Loading and Instantiation**: Web container loads servlet class
2. **Initialization**: init() method called once
3. **Request Handling**: service() method called for each request
4. **Destruction**: destroy() method called before servlet is unloaded

**Q18: What are JSP implicit objects?**
**س18: ما هي الكائنات الضمنية في JSP؟**

**Answer/الإجابة:**
JSP provides 9 implicit objects:
- **request**: HttpServletRequest object
- **response**: HttpServletResponse object  
- **session**: HttpSession object
- **application**: ServletContext object
- **out**: JspWriter object
- **page**: Current JSP page instance
- **pageContext**: PageContext object
- **config**: ServletConfig object
- **exception**: Exception object (only in error pages)

**Q19: What is the difference between forward() and sendRedirect()?**
**س19: ما الفرق بين forward() و sendRedirect()؟**

**Answer/الإجابة:**
- **forward()**: Server-side redirect, same request, URL doesn't change, request attributes preserved
- **sendRedirect()**: Client-side redirect, new request, URL changes, request attributes lost

### General Questions / أسئلة عامة

**Q20: Why should you learn these technologies before Spring Boot?**
**س20: لماذا يجب تعلم هذه التقنيات قبل Spring Boot؟**

**Answer/الإجابة:**
Understanding these fundamentals before Spring Boot is crucial because:

1. **Foundation Knowledge**: Spring Boot auto-configures many components; understanding the underlying technologies helps debug and customize
2. **Legacy Systems**: Many enterprise applications still use these technologies
3. **Configuration Understanding**: Knowing manual configuration helps understand what Spring Boot does automatically
4. **Problem Solving**: When auto-configuration fails, you need to understand the manual approach
5. **Interview Preparation**: Employers often test fundamental knowledge
6. **Architecture Decisions**: Understanding pros/cons of each approach helps make better design decisions

---

## Conclusion / الخاتمة

### Learning Path Summary / ملخص مسار التعلم

**English:**
This comprehensive guide covers all the essential Java enterprise technologies you need to master before diving into Spring Boot. Each technology builds upon the previous ones, creating a solid foundation for modern Java development.

**Arabic:**
يغطي هذا الدليل الشامل جميع تقنيات Java المؤسسية الأساسية التي تحتاج لإتقانها قبل الغوص في Spring Boot. كل تقنية تبني على السابقة، مما يخلق أساساً قوياً للتطوير الحديث بـ Java.

### Recommended Learning Sequence / تسلسل التعلم الموصى به

1. **Java Fundamentals** → **Maven** → **JDBC** 
2. **Servlets** → **JSP** → **MVC Pattern**
3. **Hibernate** → **JPA** 
4. **Spring Core** → **Spring JDBC** → **Spring MVC**
5. **Spring Boot** (after mastering the above)

### Key Takeaways / النقاط الرئيسية

**Before Spring Boot, you should understand:**
- How to manually configure data sources
- How servlets and JSP work together
- How dependency injection solves problems
- How ORM frameworks map objects to tables
- How MVC pattern organizes code
- How to handle HTTP requests and responses

**قبل Spring Boot، يجب أن تفهم:**
- كيفية تكوين مصادر البيانات يدوياً
- كيف تعمل servlets و JSP معاً
- كيف يحل حقن التبعية المشاكل
- كيف تربط أطر عمل ORM الكائنات بالجداول
- كيف ينظم نمط MVC الكود
- كيفية التعامل مع طلبات واستجابات HTTP

---

## Additional Resources / مصادر إضافية

### Books / الكتب
1. **Spring in Action** - Craig Walls
2. **Java: The Complete Reference** - Herbert Schildt
3. **Head First Servlets and JSP** - Bryan Basham
4. **Hibernate in Action** - Christian Bauer

### Online Resources / المصادر الإلكترونية
1. **Spring Documentation**: https://docs.spring.io/
2. **Oracle Java Tutorials**: https://docs.oracle.com/javase/tutorial/
3. **Hibernate Documentation**: https://hibernate.org/orm/documentation/
4. **Maven Guide**: https://maven.apache.org/guides/

### Practice Projects / مشاريع التدريب

#### Project 1: User Management System / نظام إدارة المستخدمين
**Technologies:** Servlets, JSP, JDBC, MySQL
**Features:**
- User registration and login
- CRUD operations for users
- Session management
- Input validation

#### Project 2: E-Commerce Application / تطبيق التجارة الإلكترونية
**Technologies:** Spring MVC, Hibernate, Maven
**Features:**
- Product catalog
- Shopping cart
- Order management
- User authentication

#### Project 3: Blog Management System / نظام إدارة المدونة
**Technologies:** Full Spring Framework, JPA
**Features:**
- Article management
- Comment system
- User roles and permissions
- RESTful APIs

---

## Best Practices Summary / ملخص أفضل الممارسات

### Database Layer / طبقة قاعدة البيانات
1. Always use PreparedStatement to prevent SQL injection
2. Implement proper connection pooling
3. Handle transactions appropriately
4. Use batch processing for bulk operations

### Business Layer / طبقة الأعمال
1. Keep business logic separate from presentation
2. Use service layer for business operations
3. Implement proper exception handling
4. Apply validation at appropriate layers

### Presentation Layer / طبقة العرض
1. Separate concerns (MVC pattern)
2. Use JSTL instead of scriptlets in JSP
3. Implement proper error handling
4. Validate user input both client and server side

### Configuration / التكوين
1. Externalize configuration properties
2. Use profiles for different environments
3. Implement proper logging
4. Document your configuration choices

---

## Common Mistakes to Avoid / الأخطاء الشائعة التي يجب تجنبها

### Maven Mistakes / أخطاء Maven
- Not specifying versions for plugins
- Mixing dependency scopes incorrectly
- Not using properties for version management
- Ignoring the standard directory layout

### JDBC Mistakes / أخطاء JDBC
- Not closing resources (connections, statements, result sets)
- Using Statement instead of PreparedStatement
- Not handling SQLException properly
- Hardcoding connection details

### Hibernate Mistakes / أخطاء Hibernate
- Not understanding entity lifecycle
- Causing N+1 query problems
- Not configuring cascade operations properly
- Mixing session.get() and session.load() incorrectly

### Spring Mistakes / أخطاء Spring
- Circular dependencies
- Not understanding bean scopes
- Overusing @Autowired on fields
- Not handling exceptions properly in controllers

### JSP/Servlet Mistakes / أخطاء JSP/Servlet
- Using scriptlets extensively
- Not handling sessions properly
- Mixing business logic in JSP
- Not validating input parameters

---

## Final Assessment Checklist / قائمة التقييم النهائي

Before moving to Spring Boot, ensure you can:

### Technical Skills / المهارات التقنية

**✓ Maven**
- [ ] Create a Maven project from scratch
- [ ] Manage dependencies and plugins
- [ ] Understand lifecycle phases
- [ ] Configure different profiles

**✓ JDBC**
- [ ] Establish database connections
- [ ] Perform CRUD operations
- [ ] Use PreparedStatement safely
- [ ] Handle transactions manually

**✓ Hibernate**
- [ ] Configure Hibernate without Spring
- [ ] Map entities with relationships
- [ ] Understand session management
- [ ] Write HQL queries

**✓ Spring Core**
- [ ] Configure beans using XML and annotations
- [ ] Understand IoC and DI concepts
- [ ] Implement different injection types
- [ ] Work with bean scopes and lifecycle

**✓ Spring JDBC**
- [ ] Configure DataSource manually
- [ ] Use JdbcTemplate effectively
- [ ] Handle database exceptions
- [ ] Implement transaction management

**✓ Spring MVC**
- [ ] Configure DispatcherServlet manually
- [ ] Create controllers and views
- [ ] Handle form submission and validation
- [ ] Implement RESTful services

**✓ JSP/Servlets**
- [ ] Create servlets with lifecycle methods
- [ ] Use JSP with JSTL effectively
- [ ] Manage sessions and cookies
- [ ] Implement filters and listeners

**✓ JEE Concepts**
- [ ] Understand enterprise architecture patterns
- [ ] Know when to use EJB vs Spring
- [ ] Implement security and transaction management
- [ ] Design multi-tier applications

### Conceptual Understanding / الفهم المفاهيمي

- [ ] **MVC Pattern**: Understand separation of concerns
- [ ] **Dependency Injection**: Know why it's beneficial
- [ ] **ORM**: Understand object-relational mapping
- [ ] **Transaction Management**: Know ACID properties
- [ ] **Web Architecture**: Understand request/response cycle
- [ ] **Design Patterns**: Factory, Singleton, Template Method
- [ ] **Enterprise Patterns**: DAO, Service Layer, MVC

---

## Why This Foundation Matters for Spring Boot / لماذا هذا الأساس مهم لـ Spring Boot

### Auto-Configuration Understanding / فهم التكوين التلقائي

**English:**
Spring Boot's "magic" is auto-configuration. When you understand how to configure these components manually, you'll appreciate what Spring Boot does automatically and know how to customize it when needed.

**Arabic:**
"سحر" Spring Boot هو التكوين التلقائي. عندما تفهم كيفية تكوين هذه المكونات يدوياً، ستقدر ما يفعله Spring Boot تلقائياً وستعرف كيفية تخصيصه عند الحاجة.

### Troubleshooting Skills / مهارات حل المشاكل

**With this foundation, you can:**
- Debug auto-configuration issues
- Customize default behaviors
- Optimize performance
- Handle edge cases
- Work with legacy code

**بهذا الأساس، يمكنك:**
- تصحيح مشاكل التكوين التلقائي
- تخصيص السلوكيات الافتراضية
- تحسين الأداء
- التعامل مع الحالات الاستثنائية
- العمل مع الكود القديم

### Career Advantages / مزايا مهنية

**Strong fundamentals provide:**
- Better interview performance
- Ability to work on diverse projects
- Leadership and mentoring opportunities
- Problem-solving confidence
- Technology adaptability

**الأساسيات القوية توفر:**
- أداء أفضل في المقابلات
- القدرة على العمل في مشاريع متنوعة
- فرص القيادة والإرشاد
- الثقة في حل المشاكل
- القدرة على التكيف مع التقنيات

---

## Next Steps / الخطوات التالية

### Immediate Actions / الإجراءات الفورية

1. **Set up development environment**
   - Install JDK, Maven, IDE
   - Set up MySQL database
   - Configure Tomcat server

2. **Start with hands-on projects**
   - Build the suggested practice projects
   - Follow along with code examples
   - Experiment with different configurations

3. **Join communities**
   - Stack Overflow for Q&A
   - GitHub for code examples
   - Spring community forums

### Progression to Spring Boot / التقدم إلى Spring Boot

**After mastering these fundamentals:**

1. **Spring Boot Basics**
   - Auto-configuration concepts
   - Starter dependencies
   - Application properties
   - Actuator for monitoring

2. **Spring Boot Advanced**
   - Custom auto-configuration
   - Spring Boot DevTools
   - Testing with Spring Boot
   - Microservices architecture

3. **Modern Development**
   - RESTful APIs with Spring Boot
   - Spring Data JPA
   - Spring Security
   - Docker containerization

---

## Acknowledgments / شكر وتقدير

This guide represents the collective knowledge and best practices from the Java enterprise development community. It's designed to provide a solid foundation for your Spring Boot journey.

Remember: **Understanding the fundamentals is not just about knowing how things work, but understanding WHY they work that way.**

يمثل هذا الدليل المعرفة الجماعية وأفضل الممارسات من مجتمع تطوير Java المؤسسي. صُمم لتوفير أساس قوي لرحلتك مع Spring Boot.

تذكر: **فهم الأساسيات ليس فقط معرفة كيف تعمل الأشياء، بل فهم لماذا تعمل بهذه الطريقة.**

---

**Good luck with your Java enterprise development journey! / بالتوفيق في رحلة تطوير Java المؤسسية!**

*Last Updated: September 2025*

