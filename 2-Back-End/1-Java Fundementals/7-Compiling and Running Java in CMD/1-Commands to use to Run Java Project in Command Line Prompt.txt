Basic Workflow
Running a Java project from the command line involves three major steps:

Compiling the Java code into bytecode using the javac command.
Running the compiled Java code using the java command.
Specifying the classpath if necessary (for large projects with external libraries).
Let me break it down for you with the necessary commands and explanations.

1. Navigating to Your Project Directory:
Before you run anything, you need to navigate to your project folder. Assuming your project is located in a folder called HelloWorld:

bash
Copy
cd C:\Users\Maher\Desktop\JavaFullStackWebDeveloper\2-Back-End\1-Java Fundementals\7-Compiling and Running Java in CMD\HelloWorld
This is where you want to run your commands, so make sure you are in the right folder that contains your Java files (HelloWorld.java) and where you want to compile and run them.

2. Compiling Your Java Code:
Once you're inside your project directory, the first thing you need to do is compile your Java code with the javac (Java Compiler) command.

Command to Compile:
bash
Copy
javac HelloWorld.java
Explanation:
javac: This command tells the Java Compiler to compile the Java source file.
HelloWorld.java: This is your Java source file that you want to compile.
If the compilation is successful, it will generate a file called HelloWorld.class, which is the bytecode version of your Java code.

Example Output:
bash
Copy
C:\Users\Maher\Desktop\JavaFullStackWebDeveloper\2-Back-End\1-Java Fundementals\7-Compiling and Running Java in CMD\HelloWorld>javac HelloWorld.java
After compiling, check the bin folder (or the folder where your Java files reside), and you'll find the .class file:

cpp
Copy
HelloWorld.class
3. Running the Compiled Java Code:
Once you've compiled your Java program, you can run it with the java command.

Command to Run:
bash
Copy
java HelloWorld
Explanation:
java: This command tells Java to run the program (specifically, the class file generated by the compiler).
HelloWorld: This is the name of the class that contains the main() method to start your program. Note that you don't need to add .class at the end of the class name; Java assumes the class file extension.
Example Output:
bash
Copy
C:\Users\Maher\Desktop\JavaFullStackWebDeveloper\2-Back-End\1-Java Fundementals\7-Compiling and Running Java in CMD\HelloWorld>java HelloWorld
Hello, world!
This is the output you should see if everything works correctly.

4. Handling Multiple Classes and Packages (Optional):
If your project contains multiple Java classes or is in a package (e.g., package mypackage;), you'll need to ensure the directory structure is correct and provide the fully qualified class name when running the program.

Command for Running a Class in a Package:
For example, if your HelloWorld.java has a package declaration like:

java
Copy
package HelloWorld;

public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, world!");
    }
}
Then you must compile it from the root project directory (not src or bin), and when running it, you will need to use the fully qualified name, including the package name.

Compile the Package:
bash
Copy
javac -d bin src\HelloWorld\HelloWorld.java
-d bin: This option specifies where the compiled .class files should be placed. It tells javac to place the .class files in the bin folder.
src\HelloWorld\HelloWorld.java: The path to your HelloWorld.java file.
This will create a HelloWorld.class file inside the bin\HelloWorld folder (the class is inside a package named HelloWorld).

Run the Program with Package:
bash
Copy
java -cp bin HelloWorld.HelloWorld
-cp bin: This specifies the classpath where Java should look for class files. The classpath is set to the bin directory.
HelloWorld.HelloWorld: This is the fully qualified name of the class (including the package).
5. Verbose Compilation (Optional):
If you want to see verbose output during the compilation to help debug any issues, use the -verbose flag:

bash
Copy
javac -verbose HelloWorld.java
This will print additional information about the compilation process.

Example:
bash
Copy
C:\Users\Maher\Desktop\JavaFullStackWebDeveloper\2-Back-End\1-Java Fundementals\7-Compiling and Running Java in CMD\HelloWorld>javac -verbose HelloWorld.java
This will give you detailed information on what the compiler is doing behind the scenes.

6. Running with Classpath for External Libraries (Optional):
If your Java project depends on external libraries, you may need to include the libraries in your classpath.

For example, if you're using a JAR file (say mylib.jar), you would include it like this:

Command to Run with Classpath:
bash
Copy
java -cp .;mylib.jar HelloWorld
-cp: The classpath option tells Java where to look for classes.
.: The current directory (where your compiled .class files are).
mylib.jar: The external library you want to include.
Note: On Linux or macOS, use a colon (:) instead of a semicolon (;) to separate classpath entries:

bash
Copy
java -cp .:mylib.jar HelloWorld
7. Optional: Clean Up (Delete .class Files):
Once you are done, you can clean up by deleting the .class files generated during compilation:

bash
Copy
del HelloWorld.class
This deletes the HelloWorld.class file.

Full Example for Simple Project:
Letâ€™s say your HelloWorld.java is in src:

Navigate to the Project Directory:

bash
Copy
cd C:\Users\Maher\Desktop\JavaFullStackWebDeveloper\2-Back-End\1-Java Fundementals\7-Compiling and Running Java in CMD\HelloWorld
Compile the Code:

bash
Copy
javac src\HelloWorld.java
Run the Program:

bash
Copy
java HelloWorld
Conclusion:
To summarize, here are the key commands:

Navigate to your project directory:

bash
Copy
cd <your_project_directory>
Compile the Java file:

bash
Copy
javac HelloWorld.java
Run the program:

bash
Copy
java HelloWorld
